{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CodingNomads Course Creator Docs \u00b6 This resource provides helpful guidelines for creating courses on CodingNomads' Learning Platform. It aims to: Avoid common pitfalls: We've learned our lessons while creating courses. Let's avoid making the same mistakes over again. Assure quality content: Our courses aim to provide useful and engaging educational content to our students. These guidelines will help you understand what that means for us. Standardize content layout: All courses are different, but we want to standardize their layout as much as possible, to make it easy for students to navigate across multiple courses. Unify styling: To make the general appearance of courses on our platform uniform and allow us to apply site-wide style-changes, we use Bootstrap. Explain workflows: Some workflows are specific to our platform. Read about them here and avoid hair loss when figuring it out yourself. Cast our teaching methods in writing: We have ideas on what makes a great learning experience, and how to support it through the course material and its presentation. Blog Posts \u00b6 If you are writing a tutorial for the CodingNomads Blog , then you can skip most of the content and focus on the page that describes how to Create Text-Based Lessons .","title":"CodingNomads Course Creator Docs"},{"location":"#codingnomads-course-creator-docs","text":"This resource provides helpful guidelines for creating courses on CodingNomads' Learning Platform. It aims to: Avoid common pitfalls: We've learned our lessons while creating courses. Let's avoid making the same mistakes over again. Assure quality content: Our courses aim to provide useful and engaging educational content to our students. These guidelines will help you understand what that means for us. Standardize content layout: All courses are different, but we want to standardize their layout as much as possible, to make it easy for students to navigate across multiple courses. Unify styling: To make the general appearance of courses on our platform uniform and allow us to apply site-wide style-changes, we use Bootstrap. Explain workflows: Some workflows are specific to our platform. Read about them here and avoid hair loss when figuring it out yourself. Cast our teaching methods in writing: We have ideas on what makes a great learning experience, and how to support it through the course material and its presentation.","title":"CodingNomads Course Creator Docs"},{"location":"#blog-posts","text":"If you are writing a tutorial for the CodingNomads Blog , then you can skip most of the content and focus on the page that describes how to Create Text-Based Lessons .","title":"Blog Posts"},{"location":"00-basics/","text":"Course Creation Basics \u00b6 This page introduces you to the basic ideas around creating courses for CodingNomads. In short, we want our courses to build on mixing the following four concepts: Read Watch Code Reflect Let's talk in more detail how you can implement these four concepts. Read \u00b6 Written course material gives students a structured and searchable way to gain knowledge. While for many learners it may not be the most engaging way to learn, it serves its purpose in introducing concepts and making it easy to go back to when needing to fill memory gaps. We have guidelines for technical writing that you should follow when creating the written materials for your course. In short: be clear and structured, and have fun. Watch \u00b6 Walkthrough: Show every new concept at least once before students are meant to complete it by themselves. Screencast walkthroughs are great for this exposure. Having seen the challenge completed once makes it much easier for students to learn. Code \u00b6 Labs: While understanding is crucial, it isn't enough for learning something new. In our courses, we use short programming exercises called \"labs\" for practice. Training the learned concepts helps to understand them better, as well as giving the needed repetition to train the learner's muscle-memory. Project-Oriented: Students learn best through building projects. Our brains only remember new concepts when there's a compelling reason to do so. Build well-designed projects gives students both the justification on why to learn something new, as well as satisfaction on completing it. This is why we aim to build our courses project-oriented. Capstone Project: The final capstone project of a course allows students to employ their creativity and their own interests. A good capstone project is framed well and allows students to bring together all the knowledge they gained throughout the course. At the same time it avoids hand-holding students through it, and gives them enough freedom to customize it towards their personal interests. We want to send our students off with a great project to put on their portfolio, as well as with the tools and mindset that they are able to create and accomplish their ideas by themselves. Reflect \u00b6 Reflection is essential for retention of learned content, which is why it helps students when you push them to look back and synthesize their new knowledge. Quiz Checkpoints: Interlaced with the written and video course content, students encounter quizzes that serve as checkpoints for themselves. Answering quiz questions forces them to synthesize the content they previously passively consumed. It also allows them to understand whether they got a grip on the previous section's content, or whether they will have to study it some more. Writing Prompts: To encourage students to further reflect on their learning process, you can include writing prompts (e.g. \"Journal\" resources, or open-ended quiz questions ). How To Duplicate a Resource \u00b6 Starting with our copied skeleton course resource, the easiest may be to duplicate a resource and then replace the content. This is the recommended way of starting to build your course, since it keeps important settings intact. The following video shows you how to duplicate an existing resource in our platform: How to Duplicate a Section From Another Course \u00b6 Note: You will probably not need to do this, but since it has come up, here are the steps. You can copy sections from other courses also in your role as a Teacher . To do so, click on the cogwheel-symbol on the top right of your course page, then on Import : Next, select the course you want to import from, and then select the Sections/Resources you need: Keep clicking through the prompts until you're finished, and the imported resources will be merged with the resources you already have in your course in the respective sections.","title":"Course Creation Basics"},{"location":"00-basics/#course-creation-basics","text":"This page introduces you to the basic ideas around creating courses for CodingNomads. In short, we want our courses to build on mixing the following four concepts: Read Watch Code Reflect Let's talk in more detail how you can implement these four concepts.","title":"Course Creation Basics"},{"location":"00-basics/#read","text":"Written course material gives students a structured and searchable way to gain knowledge. While for many learners it may not be the most engaging way to learn, it serves its purpose in introducing concepts and making it easy to go back to when needing to fill memory gaps. We have guidelines for technical writing that you should follow when creating the written materials for your course. In short: be clear and structured, and have fun.","title":"Read"},{"location":"00-basics/#watch","text":"Walkthrough: Show every new concept at least once before students are meant to complete it by themselves. Screencast walkthroughs are great for this exposure. Having seen the challenge completed once makes it much easier for students to learn.","title":"Watch"},{"location":"00-basics/#code","text":"Labs: While understanding is crucial, it isn't enough for learning something new. In our courses, we use short programming exercises called \"labs\" for practice. Training the learned concepts helps to understand them better, as well as giving the needed repetition to train the learner's muscle-memory. Project-Oriented: Students learn best through building projects. Our brains only remember new concepts when there's a compelling reason to do so. Build well-designed projects gives students both the justification on why to learn something new, as well as satisfaction on completing it. This is why we aim to build our courses project-oriented. Capstone Project: The final capstone project of a course allows students to employ their creativity and their own interests. A good capstone project is framed well and allows students to bring together all the knowledge they gained throughout the course. At the same time it avoids hand-holding students through it, and gives them enough freedom to customize it towards their personal interests. We want to send our students off with a great project to put on their portfolio, as well as with the tools and mindset that they are able to create and accomplish their ideas by themselves.","title":"Code"},{"location":"00-basics/#reflect","text":"Reflection is essential for retention of learned content, which is why it helps students when you push them to look back and synthesize their new knowledge. Quiz Checkpoints: Interlaced with the written and video course content, students encounter quizzes that serve as checkpoints for themselves. Answering quiz questions forces them to synthesize the content they previously passively consumed. It also allows them to understand whether they got a grip on the previous section's content, or whether they will have to study it some more. Writing Prompts: To encourage students to further reflect on their learning process, you can include writing prompts (e.g. \"Journal\" resources, or open-ended quiz questions ).","title":"Reflect"},{"location":"00-basics/#how-to-duplicate-a-resource","text":"Starting with our copied skeleton course resource, the easiest may be to duplicate a resource and then replace the content. This is the recommended way of starting to build your course, since it keeps important settings intact. The following video shows you how to duplicate an existing resource in our platform:","title":"How To Duplicate a Resource"},{"location":"00-basics/#how-to-duplicate-a-section-from-another-course","text":"Note: You will probably not need to do this, but since it has come up, here are the steps. You can copy sections from other courses also in your role as a Teacher . To do so, click on the cogwheel-symbol on the top right of your course page, then on Import : Next, select the course you want to import from, and then select the Sections/Resources you need: Keep clicking through the prompts until you're finished, and the imported resources will be merged with the resources you already have in your course in the respective sections.","title":"How to Duplicate a Section From Another Course"},{"location":"01-content-guidelines/","text":"Content Creation Guidelines \u00b6 Naming Convention \u00b6 Course Structure Naming Convention : Our courses are structured as follows: course \u2514\u2500\u2500 module \u2514\u2500\u2500 section \u2514\u2500\u2500 chapter \u2514\u2500\u2500 lesson Let's describe what each of them represent: Course : This is your full course, e.g. \"Python Programming\" Module : Modules are a collection of Sections that logically belong together and could be taken together. Sections are grouped together using Module Tags Section : Also sometimes called \"Section Topics\" or even just \"Topics\" in Moodle \ud83d\ude44. These are the collapsible sections and used for high-level structuring of the content Chapter : You create chapters by sub-dividing sections using Section Dividers Lesson : Each activity or resource that you create in your course (e.g. a Page or a Quiz) can be referred to as a \"lesson\". This is the smallest unit that will be visible in the course overview In this diagram you saw a visual description of the different elements as they appear on our platform. Structure \u00b6 The following points give guidance on how to structure your technical writing to improve readability and help readers to learn from your material. Three-Step Principle \u00b6 Follow the three-step-teaching principle: Many have recommended to use this structure, and we do too. Intro: Tell your students what information you will give them Main: Give them that info Recap: Tell them what information they just got Attempt to follow these three simple steps even for short sections. Our brain processes new information in small chunks, and it needs a proper introduction and recap to fully absorb new topics. Assume that your students are new to everything you're teaching them. Following the outlined steps above helps them with remembering the content you're teaching. It makes learning more fun and effective for your students. Sum-Up Paragraphs \u00b6 Sum up paragraphs: Try to sum up the paragraph's entire content in the first sentence. You can think of it as a mini-intro and mini-conclusion all in one piece. The body of the paragraph that follows explains the concept in more detail and gives readers a chance to linger and absorb the information. Parallel Structure \u00b6 Use parallel structure for lists and headings: Clarity is important for technical writing. Always use parallel structure when creating list items as well as headings. Parallel structure means to use the same sentence structure for each new piece of information. E.g. I wrote all the headings on this page as nouns. Each paragraph that introduces new information begins with a verb and attempts to convey the main idea of that paragraph. Parallel structure is very powerful in making your content look well structured, it can help yourself to plan out a topic clearly, and it helps your students to easier absorb the information. Flat TOC \u00b6 Use a flat TOC structure: Aim on using main headings and one additional level of sub-headings, not more. To correctly integrate with our platform, that means using <h3> headings as your main headings, and <h4> as sub-headings. Text Blocks \u00b6 Use text blocks: Each paragraph should have some visible body to it. If a text contains multiple paragraphs that consist of only one or two sentences the text may at first sight appear less professional. No need to be too strict about this, but something to keep in mind. On the other hand, also avoid making your paragraphs too blocky. Visual Aids \u00b6 Use visual aids: Using graphs, code blocks, or also fun memes and images can help to lighten the information load on your students. Technical content can get overwhelming. You're encouraged to loosen it up and give a break to your readers' eyes by introducing visual aids. If a text section seems long and dry to yourself, it will also seems so to your students. Pop in some images to change the visual pace. List & Paragraph Headings \u00b6 Use list and paragraph headlines: Bolded words or short sentences at the beginning of a list item or a paragraph help to introduce a topic. They guide your students' eyes and assist in easier absorbing relevant information. Always try to keep them in parallel structure. Formatting \u00b6 The following points provide guidance on how to format your technical writing for consistency and readability. Consistency \u00b6 Be consistent: Just like in programming, there are many correct ways of formatting your content. Please adhere to this style guide to allow consistency across all CodingNomads courses. And, most importantly, be consistent within your own course materials. Bolding \u00b6 Use bolding for new terms: Bolding should be used to introduce new terms and highlight key phrases (e.g. \"In this section, you'll learn about iteration \") Emphasis \u00b6 Use emphasis to put focus on a word: Emphasis should be used to, well, put emphasis on a word or part of a sentence (e.g. \"There is so much to learn\") 'You' vs. 'We' \u00b6 Use \"you\" instead of \"we\": Talking directly to your student makes them feel personally addressed and more engaged. (e.g. \"The project you'll be working with...\") Tone \u00b6 The following points give guidance on what to look out for in terms of tone and word choice when creating technical tutorials. General Tone \u00b6 Be friendly, supportive, and professional: Our students should feel that they are chatting with a knowledgeable and encouraging friend who is invested in their progress and also happens to be an expert on the subject matter. Word Choice \u00b6 Choose your words wisely: Avoid using words such as \"easy\", \"straightforward\", \"obvious\" etc. Your students are new to this topic, and what might seem easy to you, won't necessarily be easy for them. To avoid alienating students, rather use words such as \"user-friendly\". Personality \u00b6 Show your personality as an author: No one likes to read or watch a sterile tutorial when learning something new and challenging. Add your personal touches--be it xkcd comics, memes, or dad jokes. Of course only if that's how you roll. Don't force it, but feel free to make it fun both for yourself while writing and recording, as well as for your students when going through the course. Most of all, allow yourself to be authentic instead of sterile. Mistakes \u00b6 Show the instructor is also a mere mortal: It helps students to know that you also make mistakes, and that also for you some concepts were daunting at first or difficult to grasp. Support \u00b6 Show that you're supportive: Programming topics are tough and often confusing for newcomers. It can easily feel overwhelming, even after making some progress, when the door opens up wider and ever more information starts flooding in. Try to help your students by giving them a stable ground to stand on. Be supportive and encourage them to keep learning. Fun \u00b6 Feel free to have some fun! We want our students to enjoy our courses as much as possible and laugh as often as possible! :) Images \u00b6 Make sure to only use image material that is copyright-free. Here are a couple of resources where you can find free stock images: https://pixabay.com/ https://publicdomainvectors.org/en/ https://www.pexels.com/ https://unsplash.com/","title":"Content Creation Guidelines"},{"location":"01-content-guidelines/#content-creation-guidelines","text":"","title":"Content Creation Guidelines"},{"location":"01-content-guidelines/#naming-convention","text":"Course Structure Naming Convention : Our courses are structured as follows: course \u2514\u2500\u2500 module \u2514\u2500\u2500 section \u2514\u2500\u2500 chapter \u2514\u2500\u2500 lesson Let's describe what each of them represent: Course : This is your full course, e.g. \"Python Programming\" Module : Modules are a collection of Sections that logically belong together and could be taken together. Sections are grouped together using Module Tags Section : Also sometimes called \"Section Topics\" or even just \"Topics\" in Moodle \ud83d\ude44. These are the collapsible sections and used for high-level structuring of the content Chapter : You create chapters by sub-dividing sections using Section Dividers Lesson : Each activity or resource that you create in your course (e.g. a Page or a Quiz) can be referred to as a \"lesson\". This is the smallest unit that will be visible in the course overview In this diagram you saw a visual description of the different elements as they appear on our platform.","title":"Naming Convention"},{"location":"01-content-guidelines/#structure","text":"The following points give guidance on how to structure your technical writing to improve readability and help readers to learn from your material.","title":"Structure"},{"location":"01-content-guidelines/#three-step-principle","text":"Follow the three-step-teaching principle: Many have recommended to use this structure, and we do too. Intro: Tell your students what information you will give them Main: Give them that info Recap: Tell them what information they just got Attempt to follow these three simple steps even for short sections. Our brain processes new information in small chunks, and it needs a proper introduction and recap to fully absorb new topics. Assume that your students are new to everything you're teaching them. Following the outlined steps above helps them with remembering the content you're teaching. It makes learning more fun and effective for your students.","title":"Three-Step Principle"},{"location":"01-content-guidelines/#sum-up-paragraphs","text":"Sum up paragraphs: Try to sum up the paragraph's entire content in the first sentence. You can think of it as a mini-intro and mini-conclusion all in one piece. The body of the paragraph that follows explains the concept in more detail and gives readers a chance to linger and absorb the information.","title":"Sum-Up Paragraphs"},{"location":"01-content-guidelines/#parallel-structure","text":"Use parallel structure for lists and headings: Clarity is important for technical writing. Always use parallel structure when creating list items as well as headings. Parallel structure means to use the same sentence structure for each new piece of information. E.g. I wrote all the headings on this page as nouns. Each paragraph that introduces new information begins with a verb and attempts to convey the main idea of that paragraph. Parallel structure is very powerful in making your content look well structured, it can help yourself to plan out a topic clearly, and it helps your students to easier absorb the information.","title":"Parallel Structure"},{"location":"01-content-guidelines/#flat-toc","text":"Use a flat TOC structure: Aim on using main headings and one additional level of sub-headings, not more. To correctly integrate with our platform, that means using <h3> headings as your main headings, and <h4> as sub-headings.","title":"Flat TOC"},{"location":"01-content-guidelines/#text-blocks","text":"Use text blocks: Each paragraph should have some visible body to it. If a text contains multiple paragraphs that consist of only one or two sentences the text may at first sight appear less professional. No need to be too strict about this, but something to keep in mind. On the other hand, also avoid making your paragraphs too blocky.","title":"Text Blocks"},{"location":"01-content-guidelines/#visual-aids","text":"Use visual aids: Using graphs, code blocks, or also fun memes and images can help to lighten the information load on your students. Technical content can get overwhelming. You're encouraged to loosen it up and give a break to your readers' eyes by introducing visual aids. If a text section seems long and dry to yourself, it will also seems so to your students. Pop in some images to change the visual pace.","title":"Visual Aids"},{"location":"01-content-guidelines/#list-paragraph-headings","text":"Use list and paragraph headlines: Bolded words or short sentences at the beginning of a list item or a paragraph help to introduce a topic. They guide your students' eyes and assist in easier absorbing relevant information. Always try to keep them in parallel structure.","title":"List &amp; Paragraph Headings"},{"location":"01-content-guidelines/#formatting","text":"The following points provide guidance on how to format your technical writing for consistency and readability.","title":"Formatting"},{"location":"01-content-guidelines/#consistency","text":"Be consistent: Just like in programming, there are many correct ways of formatting your content. Please adhere to this style guide to allow consistency across all CodingNomads courses. And, most importantly, be consistent within your own course materials.","title":"Consistency"},{"location":"01-content-guidelines/#bolding","text":"Use bolding for new terms: Bolding should be used to introduce new terms and highlight key phrases (e.g. \"In this section, you'll learn about iteration \")","title":"Bolding"},{"location":"01-content-guidelines/#emphasis","text":"Use emphasis to put focus on a word: Emphasis should be used to, well, put emphasis on a word or part of a sentence (e.g. \"There is so much to learn\")","title":"Emphasis"},{"location":"01-content-guidelines/#you-vs-we","text":"Use \"you\" instead of \"we\": Talking directly to your student makes them feel personally addressed and more engaged. (e.g. \"The project you'll be working with...\")","title":"'You' vs. 'We'"},{"location":"01-content-guidelines/#tone","text":"The following points give guidance on what to look out for in terms of tone and word choice when creating technical tutorials.","title":"Tone"},{"location":"01-content-guidelines/#general-tone","text":"Be friendly, supportive, and professional: Our students should feel that they are chatting with a knowledgeable and encouraging friend who is invested in their progress and also happens to be an expert on the subject matter.","title":"General Tone"},{"location":"01-content-guidelines/#word-choice","text":"Choose your words wisely: Avoid using words such as \"easy\", \"straightforward\", \"obvious\" etc. Your students are new to this topic, and what might seem easy to you, won't necessarily be easy for them. To avoid alienating students, rather use words such as \"user-friendly\".","title":"Word Choice"},{"location":"01-content-guidelines/#personality","text":"Show your personality as an author: No one likes to read or watch a sterile tutorial when learning something new and challenging. Add your personal touches--be it xkcd comics, memes, or dad jokes. Of course only if that's how you roll. Don't force it, but feel free to make it fun both for yourself while writing and recording, as well as for your students when going through the course. Most of all, allow yourself to be authentic instead of sterile.","title":"Personality"},{"location":"01-content-guidelines/#mistakes","text":"Show the instructor is also a mere mortal: It helps students to know that you also make mistakes, and that also for you some concepts were daunting at first or difficult to grasp.","title":"Mistakes"},{"location":"01-content-guidelines/#support","text":"Show that you're supportive: Programming topics are tough and often confusing for newcomers. It can easily feel overwhelming, even after making some progress, when the door opens up wider and ever more information starts flooding in. Try to help your students by giving them a stable ground to stand on. Be supportive and encourage them to keep learning.","title":"Support"},{"location":"01-content-guidelines/#fun","text":"Feel free to have some fun! We want our students to enjoy our courses as much as possible and laugh as often as possible! :)","title":"Fun"},{"location":"01-content-guidelines/#images","text":"Make sure to only use image material that is copyright-free. Here are a couple of resources where you can find free stock images: https://pixabay.com/ https://publicdomainvectors.org/en/ https://www.pexels.com/ https://unsplash.com/","title":"Images"},{"location":"01b-text-based-lessons/","text":"Text-Based Content \u00b6 This section offers guidelines and tips for creating text-based lessons, tutorials, and blog posts for CodingNomads. This information can also help you to improve your technical writing skills. After reading this article, you'll know how to: Structure your articles to make them impactful Format your text for increased readability Use the right tone to address your audience Following these guidelines is important to achieve consistency and high quality in the technical writing that CodingNomads wants to offer to our students. Please read over these tips carefully and implement them in your writing. Structure \u00b6 This first section will guide you in structuring your technical writing so you can improve its readability and help readers to learn better from your content. Three-Step Principle \u00b6 Follow the three-step-teaching principle: Many have recommended to use this structure, and we do too: Intro: Tell your students what information you will give them Main: Give them that info Recap: Tell them what information they just got Follow these three steps even for short sections in your writing. Our brains process new information in small chunks, and they need a proper introduction and recap to fully absorb new topics. Assume that your students are new to everything you're teaching them. Following the outlined steps above helps them remember the content you're teaching. It makes learning more fun and effective for your students. Introduction \u00b6 Sell your article: Every lesson should start with a quick introduction. This is especially important for longer-form blog posts and tutorial articles. Your tutorials need to have a concise introduction that gives readers a good idea of what they will know to do after reading your text. Lists are a great tool for introductions. For example: After reading this article, you'll know how to: Structure your articles to make them impactful Format your text for increased readability Use the right tone to address your audience Attention is fleeting in the online world. Think of your introduction as an advertisement for your article. Keep it concise and make it clear to your readers what they'll gain from committing to reading your text. Conclusion \u00b6 Recap your article: Your text should end with a quick recap of what students gained by reading over it. If you are writing a self-standing tutorial or blog post, this conclusion needs to have its own heading. Many potential readers jump right to the conclusion of an article to decide whether they want to read it or not. Use it to recap the most important take-aways from your text. Make it actionable and focus on telling readers what they learned by reading your article. Use lists and focus on a similar form as you used for your introduction. Sum-Up Paragraphs \u00b6 Sum up paragraphs: Try to sum up the paragraph's entire content in the first sentence. You can think of it as a mini-intro and mini-conclusion all in one piece. The body of the paragraph that follows explains the concept in more detail and gives readers a chance to linger and absorb the information. This paragraph is an example of using this approach. Parallel Structure \u00b6 Use parallel structure for lists and headings: Clarity is important for technical writing. Always use parallel structure when creating list items as well as headings. Parallel structure means to use the same sentence structure for each new piece of information. E.g. I wrote all the headings on this page as nouns. Each paragraph that introduces new information begins with a verb and attempts to convey the main idea of that paragraph. Parallel structure is very powerful in making your content look well structured. It can help yourself to plan out a topic clearly, and it helps your students to easier absorb the information. Flat Table Of Contents \u00b6 Use a flat TOC structure: Aim to use main headings and only one additional level of sub-headings, not more. If you are writing lessons for the learning platform, that means using <h3> headings as your main headings, and <h4> as sub-headings. If you're writing a blog post, use <h2> and <h3> headings. Text Blocks \u00b6 Use text blocks: Each paragraph should have a visible body to it. If a text contains multiple paragraphs that consist of only one or two sentences the text may appear less professional at first sight. No need to be too strict about this, but keep it in mind when creating your content. On the other hand, also avoid making your paragraphs too blocky. Visual Aids \u00b6 Use visual aids: Using graphs, code blocks, images, or even fun memes can help to lighten the information load on your readers. Technical content can get overwhelming. You're encouraged to loosen it up and give a break to your readers' eyes by introducing visual aids. If a text section seems long and dry to yourself, it will also seems so to your students. Pop in some images to change the visual pace. When you use visual aids, use the three-step-principle to introduce them, as well as to add a mini-recap. Note Blocks \u00b6 Use note blocks: You can use Note and Info blocks as visual aids as well as to highlight important information that might be a little aside of the main text. If you write course content for the platform, then check out the description on Information and Alert Boxes . If you are writing a tutorial for the CodingNomads blog, then use Markdown quotes ( > ) instead. Code Blocks \u00b6 Explain code blocks: Code blocks can be a great addition to your technical lesson. Your readers are most likely beginner to intermediate programmers, therefore it is important that you explain the code you present to them. If possible, then keep the code blocks short in order to highlight what readers should focus on. When you build a project, take small steps and show the changes to the code often to avoid too many changes at once. If you show your readers a longer code block with multiple changes, then make sure to address and explain all the changes explicitly, preferably using a list. Lists \u00b6 Use lists wherever possible: Lists are a great tool for technical writing. When used correctly, they can serve both as a visual aid, and a concise presentation of content. If you write about multiple examples, or introduce x ways of doing something, always opt for presenting this information as a list. List & Paragraph Headings \u00b6 Use list and paragraph headlines: Bolded words or short sentences at the beginning of a list item or a paragraph help to introduce a topic. They guide your students' eyes and assist in easier absorbing relevant information. Always try to keep them in parallel structure. As an example, revisit the list further up that explains the three-step-principle. Sentences In Brackets \u00b6 Avoid sentences in brackets: Half-baked sentences in brackets are usually an indicator that you haven't thought enough about whether or not to include information in your text. The same holds true for sentences that are cut apart by em-dashes ( -- ). These sentence constructs are distracting in technical writing and should be avoided. If you notice one of these constructs in your text, take a moment to reconsider what it is you want to say. Then either add the sentence normally, or delete it. Slashes Between Words \u00b6 Avoid slashes between words: Another writing habit to swear off of for technical writing is using multiple words separated by slashes, e.g.: \u274c In this tutorial/blog post, you'll learn... This breaks the reader's flow and creates more confusion than it resolves. Students come to technical tutorials for clear and concise information. If you notice that you are using slashed words, take a moment to consider what is the most accurate word to use. Then delete the others. Words In Quotation Marks \u00b6 Avoid words in quotation marks: Don't use words in quotation marks for technical writing. It is another example of introducing ambiguity to your text that has no place in technical writing. If you notice you're putting a word into quotation marks, reconsider what it is you want to express. Usually there is a precise word for it. Use that instead. Formatting \u00b6 The following points provide guidance on how to format your technical writing for consistency and readability. Consistency \u00b6 Be consistent: Just like in programming, there are many correct ways of formatting your content. Please adhere to this style guide to allow consistency across all CodingNomads courses. And, most importantly, be consistent within your own course materials. Bolding \u00b6 Use bolding for new terms: Bolding should be used to introduce new terms and highlight key phrases: \u2705 In this section, you'll learn about iteration . Avoid bolding whole sentences in your text, unless they are paragraph headings. Bolding too many words at once reduces the visibility of the most important terms that you want to highlight. Emphasis \u00b6 Use emphasis to put focus on a word: Emphasis should be used to put emphasis on a word: \u2705 There is so much to learn. As with bolding, avoid putting emphasis at too many words at once. In-Line Code \u00b6 Format code: You're writing technical tutorials, so it is especially important that you're clear about what words refer to code, such as functions, methods, attributes, or code libraries. Use single backticks (`) in Markdown to correctly format your code. Generally, use the code you refer to as a noun in your sentence: \u2705 With Python's print() , you can display output to your console. Avoid adding the type of code structure you're talking about after each mention of it: \u26a0\ufe0f With Python's print() function, you can display... You can be explicit and use this construct if you are making a point about print() being a function, but avoid overusing it. Numbers \u00b6 Spell out numbers: When mentioning a number in your text, use the word for it instead of writing down the number: \u2705 Below, you'll see three examples... Using the word instead of the number itself tends to be perceived as more professional. Links \u00b6 Write text-based links : Avoid using words such as \"click here\" or just \"link\" to as the link text for external sources. Instead, make the link text a natural part of your sentence: \u2705 Code comments can help your future self, as well as other programmers, to understand your code. Use descriptive variable names in combination with explanatory code comments, where code tells you how and comments tell you why . This is the most effective way to write user-friendly code. If possible, use the title of the linked resource in your sentence. This makes your sentence more user-friendly to read and retain. Another example: \u2705 If you are still new to Python, or you need a refresher, check out the Python Software Engineering course. Using natural link texts makes your paragraphs better readable and immediately clarifies where the link will take them. Tone \u00b6 The following points give guidance on what to look out for in terms of tone and word choice when creating technical tutorials. General Tone \u00b6 Be friendly, supportive, and professional: Our students should feel that they are chatting with a knowledgeable and encouraging friend who is invested in their progress and also happens to be an expert on the subject matter. 'You' vs. 'We' \u00b6 Use \"you\" instead of \"we\": Talking directly to your student makes them feel personally addressed and more engaged: \u2705 The project you'll be working with... Always talk directly to your readers. Imagine that you are writing your content for a specific person. Hidden Plural \u00b6 Some commonly used sentence constructs are a hidden use of 'we' . You should avoid them as well. For example, don't use \"let's ...\": \u274c Let's next learn how to ... Instead, keep your focus on the reader and keep them in the center of attention: \u2705 Next, you'll learn how to ... Always talk directly to your readers. Imagine that you are talking to a specific person that is sitting in front of you. Word Choice \u00b6 Choose your words wisely: Avoid using words such as: \u274c \"easy\" \u274c \"straightforward\" \u274c \"obvious\" etc. Your students are new to this topic, and what might seem easy to you, won't necessarily be easy for them. To avoid alienating students, rather use words such as \u2705 \"user-friendly\". Personality \u00b6 Show your personality as an author: No one likes to read or watch a sterile tutorial when learning something new and challenging. Add your personal touches, whether that means using xkcd comics, memes, or dad jokes. Of course only if that's how you roll. Don't force it, but feel free to make it fun both for yourself while writing, as well as for your students when reading your content. Most of all, allow yourself to be authentic instead of sterile. Mistakes \u00b6 Show the instructor is also a mere mortal: It helps students to know that you also make mistakes, and that also for you some concepts were daunting at first or difficult to grasp. Support \u00b6 Show that you're supportive: Programming topics are tough and often confusing for newcomers. Even after making some progress it can easily feel overwhelming when the door opens up wider and ever more information starts flooding in. Try to help your students by giving them a stable ground to stand on. Be supportive and encourage them to keep learning. Fun \u00b6 Feel free to have some fun! We want your students to enjoy your content as much as possible and laugh as often as possible! :) Images \u00b6 Make sure to only use image material that is copyright-free. Here are a couple of resources where you can find free stock images: https://pixabay.com/ https://publicdomainvectors.org/en/ https://www.pexels.com/ https://unsplash.com/ Please add attribution, for example in alt texts, if that makes sense.","title":"Text-Based Content"},{"location":"01b-text-based-lessons/#text-based-content","text":"This section offers guidelines and tips for creating text-based lessons, tutorials, and blog posts for CodingNomads. This information can also help you to improve your technical writing skills. After reading this article, you'll know how to: Structure your articles to make them impactful Format your text for increased readability Use the right tone to address your audience Following these guidelines is important to achieve consistency and high quality in the technical writing that CodingNomads wants to offer to our students. Please read over these tips carefully and implement them in your writing.","title":"Text-Based Content"},{"location":"01b-text-based-lessons/#structure","text":"This first section will guide you in structuring your technical writing so you can improve its readability and help readers to learn better from your content.","title":"Structure"},{"location":"01b-text-based-lessons/#three-step-principle","text":"Follow the three-step-teaching principle: Many have recommended to use this structure, and we do too: Intro: Tell your students what information you will give them Main: Give them that info Recap: Tell them what information they just got Follow these three steps even for short sections in your writing. Our brains process new information in small chunks, and they need a proper introduction and recap to fully absorb new topics. Assume that your students are new to everything you're teaching them. Following the outlined steps above helps them remember the content you're teaching. It makes learning more fun and effective for your students.","title":"Three-Step Principle"},{"location":"01b-text-based-lessons/#introduction","text":"Sell your article: Every lesson should start with a quick introduction. This is especially important for longer-form blog posts and tutorial articles. Your tutorials need to have a concise introduction that gives readers a good idea of what they will know to do after reading your text. Lists are a great tool for introductions. For example: After reading this article, you'll know how to: Structure your articles to make them impactful Format your text for increased readability Use the right tone to address your audience Attention is fleeting in the online world. Think of your introduction as an advertisement for your article. Keep it concise and make it clear to your readers what they'll gain from committing to reading your text.","title":"Introduction"},{"location":"01b-text-based-lessons/#conclusion","text":"Recap your article: Your text should end with a quick recap of what students gained by reading over it. If you are writing a self-standing tutorial or blog post, this conclusion needs to have its own heading. Many potential readers jump right to the conclusion of an article to decide whether they want to read it or not. Use it to recap the most important take-aways from your text. Make it actionable and focus on telling readers what they learned by reading your article. Use lists and focus on a similar form as you used for your introduction.","title":"Conclusion"},{"location":"01b-text-based-lessons/#sum-up-paragraphs","text":"Sum up paragraphs: Try to sum up the paragraph's entire content in the first sentence. You can think of it as a mini-intro and mini-conclusion all in one piece. The body of the paragraph that follows explains the concept in more detail and gives readers a chance to linger and absorb the information. This paragraph is an example of using this approach.","title":"Sum-Up Paragraphs"},{"location":"01b-text-based-lessons/#parallel-structure","text":"Use parallel structure for lists and headings: Clarity is important for technical writing. Always use parallel structure when creating list items as well as headings. Parallel structure means to use the same sentence structure for each new piece of information. E.g. I wrote all the headings on this page as nouns. Each paragraph that introduces new information begins with a verb and attempts to convey the main idea of that paragraph. Parallel structure is very powerful in making your content look well structured. It can help yourself to plan out a topic clearly, and it helps your students to easier absorb the information.","title":"Parallel Structure"},{"location":"01b-text-based-lessons/#flat-table-of-contents","text":"Use a flat TOC structure: Aim to use main headings and only one additional level of sub-headings, not more. If you are writing lessons for the learning platform, that means using <h3> headings as your main headings, and <h4> as sub-headings. If you're writing a blog post, use <h2> and <h3> headings.","title":"Flat Table Of Contents"},{"location":"01b-text-based-lessons/#text-blocks","text":"Use text blocks: Each paragraph should have a visible body to it. If a text contains multiple paragraphs that consist of only one or two sentences the text may appear less professional at first sight. No need to be too strict about this, but keep it in mind when creating your content. On the other hand, also avoid making your paragraphs too blocky.","title":"Text Blocks"},{"location":"01b-text-based-lessons/#visual-aids","text":"Use visual aids: Using graphs, code blocks, images, or even fun memes can help to lighten the information load on your readers. Technical content can get overwhelming. You're encouraged to loosen it up and give a break to your readers' eyes by introducing visual aids. If a text section seems long and dry to yourself, it will also seems so to your students. Pop in some images to change the visual pace. When you use visual aids, use the three-step-principle to introduce them, as well as to add a mini-recap.","title":"Visual Aids"},{"location":"01b-text-based-lessons/#note-blocks","text":"Use note blocks: You can use Note and Info blocks as visual aids as well as to highlight important information that might be a little aside of the main text. If you write course content for the platform, then check out the description on Information and Alert Boxes . If you are writing a tutorial for the CodingNomads blog, then use Markdown quotes ( > ) instead.","title":"Note Blocks"},{"location":"01b-text-based-lessons/#code-blocks","text":"Explain code blocks: Code blocks can be a great addition to your technical lesson. Your readers are most likely beginner to intermediate programmers, therefore it is important that you explain the code you present to them. If possible, then keep the code blocks short in order to highlight what readers should focus on. When you build a project, take small steps and show the changes to the code often to avoid too many changes at once. If you show your readers a longer code block with multiple changes, then make sure to address and explain all the changes explicitly, preferably using a list.","title":"Code Blocks"},{"location":"01b-text-based-lessons/#lists","text":"Use lists wherever possible: Lists are a great tool for technical writing. When used correctly, they can serve both as a visual aid, and a concise presentation of content. If you write about multiple examples, or introduce x ways of doing something, always opt for presenting this information as a list.","title":"Lists"},{"location":"01b-text-based-lessons/#list-paragraph-headings","text":"Use list and paragraph headlines: Bolded words or short sentences at the beginning of a list item or a paragraph help to introduce a topic. They guide your students' eyes and assist in easier absorbing relevant information. Always try to keep them in parallel structure. As an example, revisit the list further up that explains the three-step-principle.","title":"List &amp; Paragraph Headings"},{"location":"01b-text-based-lessons/#sentences-in-brackets","text":"Avoid sentences in brackets: Half-baked sentences in brackets are usually an indicator that you haven't thought enough about whether or not to include information in your text. The same holds true for sentences that are cut apart by em-dashes ( -- ). These sentence constructs are distracting in technical writing and should be avoided. If you notice one of these constructs in your text, take a moment to reconsider what it is you want to say. Then either add the sentence normally, or delete it.","title":"Sentences In Brackets"},{"location":"01b-text-based-lessons/#slashes-between-words","text":"Avoid slashes between words: Another writing habit to swear off of for technical writing is using multiple words separated by slashes, e.g.: \u274c In this tutorial/blog post, you'll learn... This breaks the reader's flow and creates more confusion than it resolves. Students come to technical tutorials for clear and concise information. If you notice that you are using slashed words, take a moment to consider what is the most accurate word to use. Then delete the others.","title":"Slashes Between Words"},{"location":"01b-text-based-lessons/#words-in-quotation-marks","text":"Avoid words in quotation marks: Don't use words in quotation marks for technical writing. It is another example of introducing ambiguity to your text that has no place in technical writing. If you notice you're putting a word into quotation marks, reconsider what it is you want to express. Usually there is a precise word for it. Use that instead.","title":"Words In Quotation Marks"},{"location":"01b-text-based-lessons/#formatting","text":"The following points provide guidance on how to format your technical writing for consistency and readability.","title":"Formatting"},{"location":"01b-text-based-lessons/#consistency","text":"Be consistent: Just like in programming, there are many correct ways of formatting your content. Please adhere to this style guide to allow consistency across all CodingNomads courses. And, most importantly, be consistent within your own course materials.","title":"Consistency"},{"location":"01b-text-based-lessons/#bolding","text":"Use bolding for new terms: Bolding should be used to introduce new terms and highlight key phrases: \u2705 In this section, you'll learn about iteration . Avoid bolding whole sentences in your text, unless they are paragraph headings. Bolding too many words at once reduces the visibility of the most important terms that you want to highlight.","title":"Bolding"},{"location":"01b-text-based-lessons/#emphasis","text":"Use emphasis to put focus on a word: Emphasis should be used to put emphasis on a word: \u2705 There is so much to learn. As with bolding, avoid putting emphasis at too many words at once.","title":"Emphasis"},{"location":"01b-text-based-lessons/#in-line-code","text":"Format code: You're writing technical tutorials, so it is especially important that you're clear about what words refer to code, such as functions, methods, attributes, or code libraries. Use single backticks (`) in Markdown to correctly format your code. Generally, use the code you refer to as a noun in your sentence: \u2705 With Python's print() , you can display output to your console. Avoid adding the type of code structure you're talking about after each mention of it: \u26a0\ufe0f With Python's print() function, you can display... You can be explicit and use this construct if you are making a point about print() being a function, but avoid overusing it.","title":"In-Line Code"},{"location":"01b-text-based-lessons/#numbers","text":"Spell out numbers: When mentioning a number in your text, use the word for it instead of writing down the number: \u2705 Below, you'll see three examples... Using the word instead of the number itself tends to be perceived as more professional.","title":"Numbers"},{"location":"01b-text-based-lessons/#links","text":"Write text-based links : Avoid using words such as \"click here\" or just \"link\" to as the link text for external sources. Instead, make the link text a natural part of your sentence: \u2705 Code comments can help your future self, as well as other programmers, to understand your code. Use descriptive variable names in combination with explanatory code comments, where code tells you how and comments tell you why . This is the most effective way to write user-friendly code. If possible, use the title of the linked resource in your sentence. This makes your sentence more user-friendly to read and retain. Another example: \u2705 If you are still new to Python, or you need a refresher, check out the Python Software Engineering course. Using natural link texts makes your paragraphs better readable and immediately clarifies where the link will take them.","title":"Links"},{"location":"01b-text-based-lessons/#tone","text":"The following points give guidance on what to look out for in terms of tone and word choice when creating technical tutorials.","title":"Tone"},{"location":"01b-text-based-lessons/#general-tone","text":"Be friendly, supportive, and professional: Our students should feel that they are chatting with a knowledgeable and encouraging friend who is invested in their progress and also happens to be an expert on the subject matter.","title":"General Tone"},{"location":"01b-text-based-lessons/#you-vs-we","text":"Use \"you\" instead of \"we\": Talking directly to your student makes them feel personally addressed and more engaged: \u2705 The project you'll be working with... Always talk directly to your readers. Imagine that you are writing your content for a specific person.","title":"'You' vs. 'We'"},{"location":"01b-text-based-lessons/#hidden-plural","text":"Some commonly used sentence constructs are a hidden use of 'we' . You should avoid them as well. For example, don't use \"let's ...\": \u274c Let's next learn how to ... Instead, keep your focus on the reader and keep them in the center of attention: \u2705 Next, you'll learn how to ... Always talk directly to your readers. Imagine that you are talking to a specific person that is sitting in front of you.","title":"Hidden Plural"},{"location":"01b-text-based-lessons/#word-choice","text":"Choose your words wisely: Avoid using words such as: \u274c \"easy\" \u274c \"straightforward\" \u274c \"obvious\" etc. Your students are new to this topic, and what might seem easy to you, won't necessarily be easy for them. To avoid alienating students, rather use words such as \u2705 \"user-friendly\".","title":"Word Choice"},{"location":"01b-text-based-lessons/#personality","text":"Show your personality as an author: No one likes to read or watch a sterile tutorial when learning something new and challenging. Add your personal touches, whether that means using xkcd comics, memes, or dad jokes. Of course only if that's how you roll. Don't force it, but feel free to make it fun both for yourself while writing, as well as for your students when reading your content. Most of all, allow yourself to be authentic instead of sterile.","title":"Personality"},{"location":"01b-text-based-lessons/#mistakes","text":"Show the instructor is also a mere mortal: It helps students to know that you also make mistakes, and that also for you some concepts were daunting at first or difficult to grasp.","title":"Mistakes"},{"location":"01b-text-based-lessons/#support","text":"Show that you're supportive: Programming topics are tough and often confusing for newcomers. Even after making some progress it can easily feel overwhelming when the door opens up wider and ever more information starts flooding in. Try to help your students by giving them a stable ground to stand on. Be supportive and encourage them to keep learning.","title":"Support"},{"location":"01b-text-based-lessons/#fun","text":"Feel free to have some fun! We want your students to enjoy your content as much as possible and laugh as often as possible! :)","title":"Fun"},{"location":"01b-text-based-lessons/#images","text":"Make sure to only use image material that is copyright-free. Here are a couple of resources where you can find free stock images: https://pixabay.com/ https://publicdomainvectors.org/en/ https://www.pexels.com/ https://unsplash.com/ Please add attribution, for example in alt texts, if that makes sense.","title":"Images"},{"location":"02-markdown-course-creation/","text":"Markdown Course Creation \u00b6 We advise to use Markdown for writing your course content. It is simple to read and write, introduces consistency through limiting options, and makes the content easy to re-use in other contexts. Write in Markdown rather than using a text editing program such as MS Word or Google Docs. It is also better to use Markdown than directly creating your content inside our learning platform. The latter can sometimes be a drag due to the content box window sizing and other platform-related small annoyances. It might also make the content too site-specific and difficult to transition elsewhere. We've made this mistake before, and would prefer to avoid accruing more technical debt. Note: If you still want to use the platform-included WYSIWYG editor (called \"Atto\"), please check out how to choose your text editor and make sure to thoroughly read over and stick with our Style Guide . Here is a screencast that explains how to add your Markdown content to a resource in our platform: Headings \u00b6 As a small deviation from keeping your content as platform-agnostic as possible, you should use lower-level headings as your page's main headings: Main Headings: Use <h3> (or ### in Markdown) as your page content's main heading. Sub-Headings: Use <h4> (or #### in Markdown) as your page content's sub-headings. The course content will be integrated in our platform, and higher-level headings are reserved for course and page headings, which need to be entered in a different entry form. Table Of Contents (TOC) \u00b6 Generally I suggest to break up lessons that are too long into multiple pages. However, there are some situations when having a lot of content on a page may be unavoidable or even make sense, e.g. as a reference . In this cases it is helpful to provide the reader with a clickable table of contents . This script allows you to add a clickable TOC to the top of your Markdown documents. Note that it requires the external package called md-toc that you can install it via the included Pipfile or requirements.txt . If you execute the script inside of the top-level folder of your course content, it will add a linked TOC to the top of each file that contains the following HTML comment : <!--TOC--> It doesn't matter where it appears, but it needs to be part of a file for the script to pick it up, analyze the headings, and create the TOC. Note: The HTML comment does not get removed and the script does not check whether a TOC already exists. If you run it multiple times you will get multiple TOCs . Therefore, I suggest to run the script once at the end of your content creation workflow before adding the content to the course on the learning platform. You can find the script and more information in the dedicated utils repo on GitHub. Links \u00b6 We want to make sure that all links open up in a new tab when clicked, to avoid students from accidentally navigating away from the course. Markdown syntax doesn't have an equivalent to HTML's target=\"_blank\" which would allow to open links in new tabs. Therefore, please use real HTML for creating links in your Markdown docs: This is <a href=\"http://your.url\" target=\"_blank\">a link</a> Auto-Expand Text Snippets \u00b6 To avoid having to type this out for every link, you can use Code Snippets functionality on your text editor. In fact, you can use code snippets for just about anything you'd have to otherwise type out. E.g. if you are using VSCode you can use the following for your Code -> Preferences -> User Snippets -> markdown.json : { \"Create New Tab Link\": { \"prefix\": [\"tab\", \"tab-link\", \"tl\"], \"body\": [\"<a href='${1:https://}' target='_blank'>${2:description}</a>\"], \"description\": \"HTML link base that opens link in a new tab.\" }, \"Create Markdown Image Link For Docs\": { \"prefix\": [\"im\", \"img-int\", \"ii\"], \"body\": [\"![${2:alt}](../imgs/${1}.png)\"], \"description\": \"Docs internal Markdown image link.\" }, \"Create Alert Box\": { \"prefix\": [\"ab\", \"alert-note\", \"note\"], \"body\": [\"<div class='alert alert-warning' role='alert'>\", \" <strong>Note:</strong> ${1}\", \"</div>\"], \"description\": \"Create Bootstrap alert-warning Note box.\" }, \"Create Info Box\": { \"prefix\": [\"ib\", \"alert-info\", \"info\"], \"body\": [\"<div class='alert alert-info' role='alert'>\", \" <strong>Info:</strong> ${1}\", \"</div>\"], \"description\": \"Create Bootstrap alert-info Info box.\" }, \"Create kbd\": { \"prefix\": [\"kbd\"], \"body\": [\"<kbd>${1}</kbd>\"], \"description\": \"Create an HTML 'input' tag.\" }, \"Create Python Snippet\": { // Or adapt to another programming language... \"prefix\": [\"py\", \"ps\", \"python\"], \"body\": [\"```python\", \"$1\", \"```\"], \"description\": \"Create a Python code snippet in Markdown.\" }, \"Insert Bash Command(s)\": { \"prefix\": \"ib\", \"body\": [ \"```bash\", \"$ $1\", \"```\" ], \"description\": \"Insert a bash code snippet\" }, \"Create code HTML for info boxes\": { \"prefix\": [\"cb\"], \"body\": [\"<code>${1}</code>\"], \"description\": \"Create an HTML 'code' tag.\" }, \"Add TOC indicator comment\": { \"prefix\": [\"toc\"], \"body\": [\"<!--TOC-->\\n\"], \"description\": \"Create an indicator that a TOC should be added to this page.\" } } Alternatively, you can also us your operating systems' Keyboard Text Replace functionality. If you're on MacOS it looks like this: Same as with the code snippets in your text editor, this setting allows you to type e.g. tl in your browser where you are editing your Markdown, and it will auto-expand to <a href=\"\" target=\"_blank\"></a> . Then you only need to paste the URL and the link text. Code Snippets have the advantage that you can define where your cursor is placed and generally offer more possibilities to fine-tune the snippets. If you can, use your text editor's snippet functionality. Script-Replace All Your Markdown Links \u00b6 You can also use this script to replace all normal Markdown links with HTML links that open up in new tabs. If you make sure to remember to use this script before publishing, you can write Markdown links as you're used to. Before uploading your content to our platform, you then only need to run the script. This may be useful if you already have content written that uses normal Markdown links and can save you some editing time. Code And Code Blocks \u00b6 Code snippets wrapped in single backticks as well as code blocks with triple-backticks are correctly rendered by the platform's Markdown engine. Example Markdown Rendering \u00b6 When entering your content in Markdown, it will look like that during input: The above Markdown text will correctly render in our platform like so: Text Editor Choice \u00b6 You can change your default text editor in your user profile's cogwheel drop-down Editor Preferences . Choose Marklar for the easiest Markdown editing functionality. The Marklar editor allows you to: write your content in Markdown preview with a simple button click add images through a straightforward file upload The video below shows how to change your text editor preferences. Follow the instructions, but instead of selecting the \"Plain Text Editor\", choose the new \"Marklar\" editor option. The rest of the process is the same. After you selected the correct editor, your page editing should like like this:","title":"Markdown Course Creation"},{"location":"02-markdown-course-creation/#markdown-course-creation","text":"We advise to use Markdown for writing your course content. It is simple to read and write, introduces consistency through limiting options, and makes the content easy to re-use in other contexts. Write in Markdown rather than using a text editing program such as MS Word or Google Docs. It is also better to use Markdown than directly creating your content inside our learning platform. The latter can sometimes be a drag due to the content box window sizing and other platform-related small annoyances. It might also make the content too site-specific and difficult to transition elsewhere. We've made this mistake before, and would prefer to avoid accruing more technical debt. Note: If you still want to use the platform-included WYSIWYG editor (called \"Atto\"), please check out how to choose your text editor and make sure to thoroughly read over and stick with our Style Guide . Here is a screencast that explains how to add your Markdown content to a resource in our platform:","title":"Markdown Course Creation"},{"location":"02-markdown-course-creation/#headings","text":"As a small deviation from keeping your content as platform-agnostic as possible, you should use lower-level headings as your page's main headings: Main Headings: Use <h3> (or ### in Markdown) as your page content's main heading. Sub-Headings: Use <h4> (or #### in Markdown) as your page content's sub-headings. The course content will be integrated in our platform, and higher-level headings are reserved for course and page headings, which need to be entered in a different entry form.","title":"Headings"},{"location":"02-markdown-course-creation/#table-of-contents-toc","text":"Generally I suggest to break up lessons that are too long into multiple pages. However, there are some situations when having a lot of content on a page may be unavoidable or even make sense, e.g. as a reference . In this cases it is helpful to provide the reader with a clickable table of contents . This script allows you to add a clickable TOC to the top of your Markdown documents. Note that it requires the external package called md-toc that you can install it via the included Pipfile or requirements.txt . If you execute the script inside of the top-level folder of your course content, it will add a linked TOC to the top of each file that contains the following HTML comment : <!--TOC--> It doesn't matter where it appears, but it needs to be part of a file for the script to pick it up, analyze the headings, and create the TOC. Note: The HTML comment does not get removed and the script does not check whether a TOC already exists. If you run it multiple times you will get multiple TOCs . Therefore, I suggest to run the script once at the end of your content creation workflow before adding the content to the course on the learning platform. You can find the script and more information in the dedicated utils repo on GitHub.","title":"Table Of Contents (TOC)"},{"location":"02-markdown-course-creation/#links","text":"We want to make sure that all links open up in a new tab when clicked, to avoid students from accidentally navigating away from the course. Markdown syntax doesn't have an equivalent to HTML's target=\"_blank\" which would allow to open links in new tabs. Therefore, please use real HTML for creating links in your Markdown docs: This is <a href=\"http://your.url\" target=\"_blank\">a link</a>","title":"Links"},{"location":"02-markdown-course-creation/#auto-expand-text-snippets","text":"To avoid having to type this out for every link, you can use Code Snippets functionality on your text editor. In fact, you can use code snippets for just about anything you'd have to otherwise type out. E.g. if you are using VSCode you can use the following for your Code -> Preferences -> User Snippets -> markdown.json : { \"Create New Tab Link\": { \"prefix\": [\"tab\", \"tab-link\", \"tl\"], \"body\": [\"<a href='${1:https://}' target='_blank'>${2:description}</a>\"], \"description\": \"HTML link base that opens link in a new tab.\" }, \"Create Markdown Image Link For Docs\": { \"prefix\": [\"im\", \"img-int\", \"ii\"], \"body\": [\"![${2:alt}](../imgs/${1}.png)\"], \"description\": \"Docs internal Markdown image link.\" }, \"Create Alert Box\": { \"prefix\": [\"ab\", \"alert-note\", \"note\"], \"body\": [\"<div class='alert alert-warning' role='alert'>\", \" <strong>Note:</strong> ${1}\", \"</div>\"], \"description\": \"Create Bootstrap alert-warning Note box.\" }, \"Create Info Box\": { \"prefix\": [\"ib\", \"alert-info\", \"info\"], \"body\": [\"<div class='alert alert-info' role='alert'>\", \" <strong>Info:</strong> ${1}\", \"</div>\"], \"description\": \"Create Bootstrap alert-info Info box.\" }, \"Create kbd\": { \"prefix\": [\"kbd\"], \"body\": [\"<kbd>${1}</kbd>\"], \"description\": \"Create an HTML 'input' tag.\" }, \"Create Python Snippet\": { // Or adapt to another programming language... \"prefix\": [\"py\", \"ps\", \"python\"], \"body\": [\"```python\", \"$1\", \"```\"], \"description\": \"Create a Python code snippet in Markdown.\" }, \"Insert Bash Command(s)\": { \"prefix\": \"ib\", \"body\": [ \"```bash\", \"$ $1\", \"```\" ], \"description\": \"Insert a bash code snippet\" }, \"Create code HTML for info boxes\": { \"prefix\": [\"cb\"], \"body\": [\"<code>${1}</code>\"], \"description\": \"Create an HTML 'code' tag.\" }, \"Add TOC indicator comment\": { \"prefix\": [\"toc\"], \"body\": [\"<!--TOC-->\\n\"], \"description\": \"Create an indicator that a TOC should be added to this page.\" } } Alternatively, you can also us your operating systems' Keyboard Text Replace functionality. If you're on MacOS it looks like this: Same as with the code snippets in your text editor, this setting allows you to type e.g. tl in your browser where you are editing your Markdown, and it will auto-expand to <a href=\"\" target=\"_blank\"></a> . Then you only need to paste the URL and the link text. Code Snippets have the advantage that you can define where your cursor is placed and generally offer more possibilities to fine-tune the snippets. If you can, use your text editor's snippet functionality.","title":"Auto-Expand Text Snippets"},{"location":"02-markdown-course-creation/#script-replace-all-your-markdown-links","text":"You can also use this script to replace all normal Markdown links with HTML links that open up in new tabs. If you make sure to remember to use this script before publishing, you can write Markdown links as you're used to. Before uploading your content to our platform, you then only need to run the script. This may be useful if you already have content written that uses normal Markdown links and can save you some editing time.","title":"Script-Replace All Your Markdown Links"},{"location":"02-markdown-course-creation/#code-and-code-blocks","text":"Code snippets wrapped in single backticks as well as code blocks with triple-backticks are correctly rendered by the platform's Markdown engine.","title":"Code And Code Blocks"},{"location":"02-markdown-course-creation/#example-markdown-rendering","text":"When entering your content in Markdown, it will look like that during input: The above Markdown text will correctly render in our platform like so:","title":"Example Markdown Rendering"},{"location":"02-markdown-course-creation/#text-editor-choice","text":"You can change your default text editor in your user profile's cogwheel drop-down Editor Preferences . Choose Marklar for the easiest Markdown editing functionality. The Marklar editor allows you to: write your content in Markdown preview with a simple button click add images through a straightforward file upload The video below shows how to change your text editor preferences. Follow the instructions, but instead of selecting the \"Plain Text Editor\", choose the new \"Marklar\" editor option. The rest of the process is the same. After you selected the correct editor, your page editing should like like this:","title":"Text Editor Choice"},{"location":"03-course-completion/","text":"Course Completion \u00b6 If you are using a copied starter course, these settings should already be selected correctly for you and you won't need to take further action. Under Edit / Course Completion / Default activity completion you can check up on (and set) the following default completion for resources in your course: Assignments : Student must submit this activity to complete it Feedback : View as completed if the feedback is submitted Journals, Pages, URLs, Video Time Instances : Student must view this activity to complete it Quizzes : Student must receive a grade to complete this activity Bulk editing for already existing resources can also be done in the same settings page under the Bulk edit activity completion tab. Access Restriction \u00b6 When students sign up for a free trial of our learning platform they should get access to some but not all resources. Learn here how to change the access settings for individual resources in your course:","title":"Course Completion"},{"location":"03-course-completion/#course-completion","text":"If you are using a copied starter course, these settings should already be selected correctly for you and you won't need to take further action. Under Edit / Course Completion / Default activity completion you can check up on (and set) the following default completion for resources in your course: Assignments : Student must submit this activity to complete it Feedback : View as completed if the feedback is submitted Journals, Pages, URLs, Video Time Instances : Student must view this activity to complete it Quizzes : Student must receive a grade to complete this activity Bulk editing for already existing resources can also be done in the same settings page under the Bulk edit activity completion tab.","title":"Course Completion"},{"location":"03-course-completion/#access-restriction","text":"When students sign up for a free trial of our learning platform they should get access to some but not all resources. Learn here how to change the access settings for individual resources in your course:","title":"Access Restriction"},{"location":"04-creating-quizzes/","text":"Creating Quizzes \u00b6 You can add a Quiz resource like any other resource in your course by clicking on Add Resource and selecting Quiz . Click on \"Save and display\" to create the Quiz. Note : Creating a Quiz does not yet create any questions, this is a separate step that should be completed in the Question Bank. Use the Question Bank \u00b6 Create and manage questions using the Moodle Question Bank . https://platform.codingnomads.co/learn/question/edit.php?courseid=8&cat=529%2C238 Create And Use Categories \u00b6 These help to keep questions searchable and make it easier to add and edit questions related to a specific quiz. Question Behavior \u00b6 We want students to receive immediate feedback if possible. Therefore, we encourage you to use \"Adaptive Mode\" (the default) for quiz questions. You can see other possible modes in Moodle's docs on Question behaviour . Note: Please use other modes only if you have a good and justified reason to do so. Chat me up with those reasons before getting started. Feedback On Student Answers \u00b6 Students should be able to \"check\" their answers to questions and receive feedback. For this, you will need to fill out the \"Feedback\" blocks when creating a question.","title":"Creating Quizzes"},{"location":"04-creating-quizzes/#creating-quizzes","text":"You can add a Quiz resource like any other resource in your course by clicking on Add Resource and selecting Quiz . Click on \"Save and display\" to create the Quiz. Note : Creating a Quiz does not yet create any questions, this is a separate step that should be completed in the Question Bank.","title":"Creating Quizzes"},{"location":"04-creating-quizzes/#use-the-question-bank","text":"Create and manage questions using the Moodle Question Bank . https://platform.codingnomads.co/learn/question/edit.php?courseid=8&cat=529%2C238","title":"Use the Question Bank"},{"location":"04-creating-quizzes/#create-and-use-categories","text":"These help to keep questions searchable and make it easier to add and edit questions related to a specific quiz.","title":"Create And Use Categories"},{"location":"04-creating-quizzes/#question-behavior","text":"We want students to receive immediate feedback if possible. Therefore, we encourage you to use \"Adaptive Mode\" (the default) for quiz questions. You can see other possible modes in Moodle's docs on Question behaviour . Note: Please use other modes only if you have a good and justified reason to do so. Chat me up with those reasons before getting started.","title":"Question Behavior"},{"location":"04-creating-quizzes/#feedback-on-student-answers","text":"Students should be able to \"check\" their answers to questions and receive feedback. For this, you will need to fill out the \"Feedback\" blocks when creating a question.","title":"Feedback On Student Answers"},{"location":"05-quiz-question-types/","text":"Quiz Questions \u00b6 Quiz questions are primarily meant as a chance for students to become active in their learning process, after having read or watched some content passively. They serve as quick check-in points and don't need to be too complex. Keep the questions and question types simple, both for your own and your students benefit. The main value of quizzes are: Activate : Switching from passive to active learning Double-Check : Self-check-in for students whether they understood the main concepts from a section This is why we suggest to use multiple-choice or true/false questions. We have experimented with using other question types of the many that our learning platform offers, but keeping it simple has proven to be the best way to go in terms of quizzes. Importing Quiz Questions \u00b6 Moodle supports a text format called .gift for importing quiz questions. The format is human-readable, which makes it a good option to create your quiz questions alongside your Markdown content, and keep them version-controlled, but be able to quickly add them to your course on the platform. The screencast below walks you over how to create questions in this format and upload them to the platform: To learn more, read over this concise GIFT Reference sheet , or download it from the Resources Folder . Here are two example questions written in .gift format, the first one being a multiple-choice question, the second one a True/False one: Do you like this format? { ~no ~maybe =YESSSS! } Uploading quiz questions saves some of your valuable time {TRUE} Check out the screencast and the linked reference sheet to learn about additional options, such as question feedback, answer percentages, question names, and automatically adding questions to categories. If you want to create your questions directly on the platform instead of going down the .gift route, keep reading below for some information to keep in mind. Multiple Choice and Single Choice Questions \u00b6 Choose the appropriate type when creating a question. Make sure that the following settings are applied: Adaptive Mode : Grading should be set to Adaptive Mode to allow students to check whether they have the correct answer or not. Quizzes are meant as a learning experience, not as a test No Penalties : Make sure that penalties for wrong answers are set to 0 . Again, quizzes are for learning and you don't want to penalized students for getting it wrong Percentages : You will have to assign a percentage of the total point score to each answer. Make sure that these add up to 100%. E.g. if you are creating a true/false question, the correct answer should get 100% and the wrong answer should get 0% . If you are creating a multiple choice question, the percentages of all correct answers should add up to 100% . If there are 3 correct answers, choose the 33.33% setting for each of them As mentioned above, attempt to keep the quizzes simple. Most of the time using these two question types will be enough to give your students the experience of switching into a simple active learning mode, and helping them to check up on how much they were paying attention in the previous section. Code Runner Questions \u00b6 Code Runner questions allow your students to write and execute code snippets, to test their practical understanding and train their coding skills. The screencast below explains how to set up a Code Runner question for your Quiz resource: Feedback Resource \u00b6 The Feedback Resource is not exactly a quiz, but it prompts students to answer questions as well. It is a different resource type that has a specific template we want you to use. After creating the Feedback resource, you can select the template in the \"Templates\" tab:","title":"Quiz Questions"},{"location":"05-quiz-question-types/#quiz-questions","text":"Quiz questions are primarily meant as a chance for students to become active in their learning process, after having read or watched some content passively. They serve as quick check-in points and don't need to be too complex. Keep the questions and question types simple, both for your own and your students benefit. The main value of quizzes are: Activate : Switching from passive to active learning Double-Check : Self-check-in for students whether they understood the main concepts from a section This is why we suggest to use multiple-choice or true/false questions. We have experimented with using other question types of the many that our learning platform offers, but keeping it simple has proven to be the best way to go in terms of quizzes.","title":"Quiz Questions"},{"location":"05-quiz-question-types/#importing-quiz-questions","text":"Moodle supports a text format called .gift for importing quiz questions. The format is human-readable, which makes it a good option to create your quiz questions alongside your Markdown content, and keep them version-controlled, but be able to quickly add them to your course on the platform. The screencast below walks you over how to create questions in this format and upload them to the platform: To learn more, read over this concise GIFT Reference sheet , or download it from the Resources Folder . Here are two example questions written in .gift format, the first one being a multiple-choice question, the second one a True/False one: Do you like this format? { ~no ~maybe =YESSSS! } Uploading quiz questions saves some of your valuable time {TRUE} Check out the screencast and the linked reference sheet to learn about additional options, such as question feedback, answer percentages, question names, and automatically adding questions to categories. If you want to create your questions directly on the platform instead of going down the .gift route, keep reading below for some information to keep in mind.","title":"Importing Quiz Questions"},{"location":"05-quiz-question-types/#multiple-choice-and-single-choice-questions","text":"Choose the appropriate type when creating a question. Make sure that the following settings are applied: Adaptive Mode : Grading should be set to Adaptive Mode to allow students to check whether they have the correct answer or not. Quizzes are meant as a learning experience, not as a test No Penalties : Make sure that penalties for wrong answers are set to 0 . Again, quizzes are for learning and you don't want to penalized students for getting it wrong Percentages : You will have to assign a percentage of the total point score to each answer. Make sure that these add up to 100%. E.g. if you are creating a true/false question, the correct answer should get 100% and the wrong answer should get 0% . If you are creating a multiple choice question, the percentages of all correct answers should add up to 100% . If there are 3 correct answers, choose the 33.33% setting for each of them As mentioned above, attempt to keep the quizzes simple. Most of the time using these two question types will be enough to give your students the experience of switching into a simple active learning mode, and helping them to check up on how much they were paying attention in the previous section.","title":"Multiple Choice and Single Choice Questions"},{"location":"05-quiz-question-types/#code-runner-questions","text":"Code Runner questions allow your students to write and execute code snippets, to test their practical understanding and train their coding skills. The screencast below explains how to set up a Code Runner question for your Quiz resource:","title":"Code Runner Questions"},{"location":"05-quiz-question-types/#feedback-resource","text":"The Feedback Resource is not exactly a quiz, but it prompts students to answer questions as well. It is a different resource type that has a specific template we want you to use. After creating the Feedback resource, you can select the template in the \"Templates\" tab:","title":"Feedback Resource"},{"location":"06-creating-assignments/","text":"Assignment Resources \u00b6 This section contains information about setting up Assignment resources on our platform. Generally it will be easier for you if you clone one of the existing Assignment resources that come with your skeleton course. Objective \u00b6 Assignment resources are meant as checkpoints for students, where they know they need to complete something and submit it in order to finish the task. These resources are currently not optimal, since they were built for other types of assignments than the ones we are asking our students to complete. They still work well as checkpoints where students can post e.g. a GitHub link to their finished assignment, and are later able to quickly find it and discuss their code with their mentor. Creating Assignments \u00b6 If you really need to create an Assignment resource yourself, make sure to adapt the following sections in the Assignment resource's settings: Set the Grade to None . Assignments are meant to be completed and submitted, but we are currently not grading them through the platform's system: Make sure that all boxes called Enable in the Availability section are unchecked . We don't want to restrict submissions to a certain date range, since we are not working with time-dedicated student cohorts: Completion Settings \u00b6 This should be automatically set so that the resource has the condition that students submit it. If for any reason this is not the case, please make sure that the Course Completion Settings are set accordingly.","title":"Assignment Resources"},{"location":"06-creating-assignments/#assignment-resources","text":"This section contains information about setting up Assignment resources on our platform. Generally it will be easier for you if you clone one of the existing Assignment resources that come with your skeleton course.","title":"Assignment Resources"},{"location":"06-creating-assignments/#objective","text":"Assignment resources are meant as checkpoints for students, where they know they need to complete something and submit it in order to finish the task. These resources are currently not optimal, since they were built for other types of assignments than the ones we are asking our students to complete. They still work well as checkpoints where students can post e.g. a GitHub link to their finished assignment, and are later able to quickly find it and discuss their code with their mentor.","title":"Objective"},{"location":"06-creating-assignments/#creating-assignments","text":"If you really need to create an Assignment resource yourself, make sure to adapt the following sections in the Assignment resource's settings: Set the Grade to None . Assignments are meant to be completed and submitted, but we are currently not grading them through the platform's system: Make sure that all boxes called Enable in the Availability section are unchecked . We don't want to restrict submissions to a certain date range, since we are not working with time-dedicated student cohorts:","title":"Creating Assignments"},{"location":"06-creating-assignments/#completion-settings","text":"This should be automatically set so that the resource has the condition that students submit it. If for any reason this is not the case, please make sure that the Course Completion Settings are set accordingly.","title":"Completion Settings"},{"location":"07-creating-labs/","text":"Lab Resources \u00b6 This section contains information about code training exercises (called \"labs\"). You can read about logistics regarding hosting and how to include them into your course, as well as some examples of how expected lab challenges could look like. Lab Content \u00b6 Labs are the training exercises for your students. They are the \"katas\" of a programmer and should help your students to train their skills by pushing them to type and think and type some more. Repetition is an important part of learning, and while your main focus should be on getting students to work on interesting projects, some coding concepts simply require plain old training. Breaking concepts up into small parts that can be individually trained also helps students to keep on top of the large amount of new information they need to absorb. Form \u00b6 To make it easy for students to start coding, you should provide them with files that include instructions so that they only need to open the file in their preferred text editor and start coding. Example \u00b6 An example file for our beginner Python course looks e.g. like so: 01_06_hello5.py ''' Write the necessary code to display \"Hello World!\" 5 times. ''' The file contains the instructions for the lab's task as a python multi-line comment. Right underneath the comment the student can write and execute their code: 01_06_hello5.py ''' Write the necessary code to display \"Hello World!\" 5 times. ''' print(\"Hello World! \" * 5) After finishing the task, they can push it back up to their GitHub repo and thus keep the instructions and the code side-by-side. This makes it easy for their mentor to give them feedback on the lab. Hosting And Accessing Labs \u00b6 GitHub Hosted: We host labs on GitHub, one repository per course. Our lab repos should look similar to this course example and link to a call for signing up for the course in their README file. Students Download Or Clone Labs : Students either download the .zip for the repo from GitHub, or clone the repo at the beginning of taking the course. Generally, we want to encourage students to use version control and open-source right from the start. However, for beginner courses we opt for students to download a .zip file rather than making them jump through the hoops of using Git and GitHub. Beginner Course : Set up a URL Resource in your course that links to a \"Download ZIP\" URL of your course's GitHub repo. Advanced Course : You can opt to add a resource that explains students quickly how to clone your labs repo. We can assume that advanced students are already familiar with using version control. Pro's and Con's for Downloading vs. Cloning the labs: Download: No sync for updates we do Clone: requires some pre-existing Git knowledge Ordering Labs \u00b6 Files and file structures can easily get out of control and there are always 100 valid ways of setting up a repository. For uniformity's sake, we ask you to stick to the following setup. However, we are open for suggestions on how to improve the structure. Use Logical Folder Structure \u00b6 When creating your labs it is best to follow a folder structure that mirrors the section structure of your course. Each course section should have some associated labs. A logical folder structure will help your students in their learning progress. Use Consistent Numbering \u00b6 Use double-double-digit numbering for individual labs. This helps to keeps them in the order you intend students to tackle them. Here's a link to a script that helps with renaming . It's likely that you'll need to rename your labs in the process of creating your course. Feel free to use and customize this script as much as is helpful for you. Example Folder Structure With Lab Files \u00b6 Below you can see an example of a folder structure for your lab files, including appropriate numbering: python_labs | \u251c\u2500\u2500 01_python_fundamentals \u2502 \u251c\u2500\u2500 01_01_run_it.py \u2502 \u251c\u2500\u2500 01_02_seconds_years.py \u2502 \u251c\u2500\u2500 01_03_yeehaw.py \u2502 \u251c\u2500\u2500 01_04_formula.py \u2502 \u251c\u2500\u2500 01_05_addition.py \u2502 \u251c\u2500\u2500 01_06_hello5.py \u2502 \u2514\u2500\u2500 01_07_area_perimeter.py --- snip --- \u251c\u2500\u2500 17_decorators \u2502 \u251c\u2500\u2500 17_01_wraps.py \u2502 \u2514\u2500\u2500 17_02_tags.py \u2514\u2500\u2500 18_lambdas \u251c\u2500\u2500 18_01_first_lambda.py \u251c\u2500\u2500 18_02_return.py \u251c\u2500\u2500 18_03_rewrite.py \u251c\u2500\u2500 18_04_hello.py \u251c\u2500\u2500 18_05_names.py \u2514\u2500\u2500 18_06_tuple_sort.py Following a consistently named and structured lab setup, such as the one shown above, makes it easier for your students to follow through. It also makes it easier to uniquely identify each lab challenge should a student have a question.","title":"Lab Resources"},{"location":"07-creating-labs/#lab-resources","text":"This section contains information about code training exercises (called \"labs\"). You can read about logistics regarding hosting and how to include them into your course, as well as some examples of how expected lab challenges could look like.","title":"Lab Resources"},{"location":"07-creating-labs/#lab-content","text":"Labs are the training exercises for your students. They are the \"katas\" of a programmer and should help your students to train their skills by pushing them to type and think and type some more. Repetition is an important part of learning, and while your main focus should be on getting students to work on interesting projects, some coding concepts simply require plain old training. Breaking concepts up into small parts that can be individually trained also helps students to keep on top of the large amount of new information they need to absorb.","title":"Lab Content"},{"location":"07-creating-labs/#form","text":"To make it easy for students to start coding, you should provide them with files that include instructions so that they only need to open the file in their preferred text editor and start coding.","title":"Form"},{"location":"07-creating-labs/#example","text":"An example file for our beginner Python course looks e.g. like so: 01_06_hello5.py ''' Write the necessary code to display \"Hello World!\" 5 times. ''' The file contains the instructions for the lab's task as a python multi-line comment. Right underneath the comment the student can write and execute their code: 01_06_hello5.py ''' Write the necessary code to display \"Hello World!\" 5 times. ''' print(\"Hello World! \" * 5) After finishing the task, they can push it back up to their GitHub repo and thus keep the instructions and the code side-by-side. This makes it easy for their mentor to give them feedback on the lab.","title":"Example"},{"location":"07-creating-labs/#hosting-and-accessing-labs","text":"GitHub Hosted: We host labs on GitHub, one repository per course. Our lab repos should look similar to this course example and link to a call for signing up for the course in their README file. Students Download Or Clone Labs : Students either download the .zip for the repo from GitHub, or clone the repo at the beginning of taking the course. Generally, we want to encourage students to use version control and open-source right from the start. However, for beginner courses we opt for students to download a .zip file rather than making them jump through the hoops of using Git and GitHub. Beginner Course : Set up a URL Resource in your course that links to a \"Download ZIP\" URL of your course's GitHub repo. Advanced Course : You can opt to add a resource that explains students quickly how to clone your labs repo. We can assume that advanced students are already familiar with using version control. Pro's and Con's for Downloading vs. Cloning the labs: Download: No sync for updates we do Clone: requires some pre-existing Git knowledge","title":"Hosting And Accessing Labs"},{"location":"07-creating-labs/#ordering-labs","text":"Files and file structures can easily get out of control and there are always 100 valid ways of setting up a repository. For uniformity's sake, we ask you to stick to the following setup. However, we are open for suggestions on how to improve the structure.","title":"Ordering Labs"},{"location":"07-creating-labs/#use-logical-folder-structure","text":"When creating your labs it is best to follow a folder structure that mirrors the section structure of your course. Each course section should have some associated labs. A logical folder structure will help your students in their learning progress.","title":"Use Logical Folder Structure"},{"location":"07-creating-labs/#use-consistent-numbering","text":"Use double-double-digit numbering for individual labs. This helps to keeps them in the order you intend students to tackle them. Here's a link to a script that helps with renaming . It's likely that you'll need to rename your labs in the process of creating your course. Feel free to use and customize this script as much as is helpful for you.","title":"Use Consistent Numbering"},{"location":"07-creating-labs/#example-folder-structure-with-lab-files","text":"Below you can see an example of a folder structure for your lab files, including appropriate numbering: python_labs | \u251c\u2500\u2500 01_python_fundamentals \u2502 \u251c\u2500\u2500 01_01_run_it.py \u2502 \u251c\u2500\u2500 01_02_seconds_years.py \u2502 \u251c\u2500\u2500 01_03_yeehaw.py \u2502 \u251c\u2500\u2500 01_04_formula.py \u2502 \u251c\u2500\u2500 01_05_addition.py \u2502 \u251c\u2500\u2500 01_06_hello5.py \u2502 \u2514\u2500\u2500 01_07_area_perimeter.py --- snip --- \u251c\u2500\u2500 17_decorators \u2502 \u251c\u2500\u2500 17_01_wraps.py \u2502 \u2514\u2500\u2500 17_02_tags.py \u2514\u2500\u2500 18_lambdas \u251c\u2500\u2500 18_01_first_lambda.py \u251c\u2500\u2500 18_02_return.py \u251c\u2500\u2500 18_03_rewrite.py \u251c\u2500\u2500 18_04_hello.py \u251c\u2500\u2500 18_05_names.py \u2514\u2500\u2500 18_06_tuple_sort.py Following a consistently named and structured lab setup, such as the one shown above, makes it easier for your students to follow through. It also makes it easier to uniquely identify each lab challenge should a student have a question.","title":"Example Folder Structure With Lab Files"},{"location":"08-creating-videos/","text":"Creating Videos \u00b6 This document will guide you in how to create video lessons for your course. Let's start with a tl;dr (but do read over it): Hardware: A good mic is extremely important, also use a pop filter and a mic arm Software: If possible, use screen recording software Screen Resolution: 16:9 Video Length: 3-5 minutes is best, definitely stay below 10 minutes Tone: Your friendly neighborhood coder Didactic Structure \u00b6 Same as with your written content: follow the 3-step-teaching principle : Intro : Tell your students what information you will give them Main : Give them that info Recap : Tell them what information they just got Screencast Recording Tips \u00b6 Recording Screencasts - Hardware, Software, Dos and Don'ts (by Wes Bos) Code School Screencasting Framework How To Record a Programming Screencast (by Scott Lilly) How To Create Screencasts That Don\u2019t Suck (by Shawn Hesketh) Examples Of Coding Screencasts \u00b6 Beginner's Guide to JavaScript (by Guil Hernandez) Highly legible coding examples even at small screen sizes, editor is full screen. What's the meaning of underscores (_ & __) in Python variable names? (by Dan Bader) Python Tutorial for Absolute Beginners #1 - What Are Variables? (by YK Suaishita) Python Tutorial for Beginners 8: Functions (by Corey Shafer) Note: Font size could be increased Heres how JavaScript \"Named Params\" Destructuring Works (by Wes Bos) Note: Stopping to show your face after the intro gives more space for your code Heres how React's New Context API Works (by Wes Bos) Note: Removing editor menu bars etc. avoids clutter and dating of the video Free Courses at Vuemastery.com Hardware \u00b6 Great audio quality is extremely important for quality screencasts. Having a good microphone makes up for most of that, but there are also a couple of other things to consider. Read about how to improve your hardware setup for audio recording in this section. Microphone \u00b6 If you are serious about creating quality screencasts, a good microphone is essential. Please contact us if you are building a course but you don't have a quality microphone equipment, since we may be able to support you in purchasing one. Recommendation: \"Audio Technica ATR 2100 USB\" (or \"Samson Q2U\" in Europe). This is a low-price but high-quality microphone that operates over USB. It is small and simple to handle, yet dramatically increases the audio quality as compared to your built-in computer mic. Microphone Adjustments \u00b6 Distance: Aim for 2-20cm (1-8 inches) between your mouth and the microphone. Direction: Aim to speak directly into the mic, not off to the side. Gain: Turn up your gain, but avoid it going too high. Additional Equipment \u00b6 Mic Arm: Sinc you will want to have your computer in front of you for coding, a mic arm can help to place the mic where you need it for a good recording outcome. Pop-Filter: Plosives, such as \"p\", \"t\", \"k\", can come out surprisingly loud and disturbing in a spoken audio recording. A pop filter can help to reduce these pop sounds. Headphones: In case that you like to hear your voice during the recording, a pair of headphones will be necessary. Use in-ear headphones to avoid any sound they produce from leaking into your recording. Audio Foam: Using audio foam can reduce room echo. If you have a small room with fabric, such as a walk-in closet, that can also work as an uncomplicated alternative. T-Shirt: No, this is not about getting dressed! Putting a T-Shirt under your laptop while recording can significantly reduce the clicking noise that your computer keys make. Software \u00b6 Most of your videos will be screen recordings . The important part to remember is that we want you to record both your video as well as audio in the highest resolution that makes sense. Large files are not a problem, and having a high video and audio quality allows for more precise editing (e.g. code zooms when necessary) without compromising the viewing experience. Below is a list of software solutions that help you with recording your screen while retaining video quality as well as your personal sanity: QuickTime Player (MacOS): Comes with the OS and is a simple way to get started . Price : Free iShowUInstant (MacOS): Allows to record specific windows and even set the size of a recording screen. Easy to start/pause/stop recordings. Low-cost option that makes already improves your screen recording experience. (I, Martin, use this one. Happy to answer questions about it) Price : $24 OBS Studio (MacOs, Windows, Linux): Free and Open-Source software for video recording and live streaming. Check out these tutorials for Windows or for Linux Price : Free Screen Flow (MacOs): Professional screen recording software with a higher price tag and more features. Price : $129 Camtasia (MacOS, Windows): The biggest and baddest (but in a good way). Includes a full-featured and easy-to-use editing studio as well. Haven't used it myself, but heard good things about it. Probably overkill, though, unless you're really into that. Price : \u20ac269.05 Additional Software \u00b6 KeyCastr (MacOs): you can show key presses on screen, which helps viewers if you're using any keyboard shortcuts. The program allows you to display all key presses or only command keys, and is easy to toggle on and off. Mousepose (MacOs): allows to highlight your cursor to better show clicks and cursor movements on your recording. Alternatively, you can increase your cursor size through your operating system\u2019s accessibility settings. Recording \u00b6 In this section, you'll find tips that can help you during recording to create the best possible video lessons for your students. Video Length \u00b6 3-5 minutes: Keeping your videos short helps both you and your students to stay on track. Aim for 3-5 minutes per video, and definitely stay below 10 minutes. If you are explaining a complex concept that requires more time, split it up in logical chunks that are each below 10 minutes. Keeping our students engaged is paramount, so we want to give them the sense of achievement and completion when finishing a section as often as possible. Our brains are also much better at processing small chunks of information, and it's easier for students to go back and revisit a topic if the videos are on-point, clear, and easy to digest. Shorter videos: You can also create shorter videos, e.g. to introduce a section in the course. Such videos can be only 1 minute long, yet help students to prepare for an upcoming new topic. Screen Resolution And Framerate \u00b6 Always record in a 16:9 ratio with a framerate of 60 FPS . Don't go below 30 FPS since cursor movements start looking jumpy and are then difficult to follow. To assure the right screen ratio, either set your screen resolution to 16:9 and record fullscreen, or create a defined 16:9 area on your screen and record only that section. Screen recording software can greatly help with both aspects. Fullscreen-Recording : Your screen needs to be set to a 16:9 resolution (e.g. 720p HiDPI (= 1440p real resolution), 1080p or 720p). If your computer doesn't support a 16:9 screen resolution, there are a few hacks you can attempt: External Monitor : If you have access to an external monitor with the right aspect ratio, this can be a great way to go. It also allows you to use your laptop for notes etc. while recording. Hidden Display Options : On some MacBook models and MacOS versions, you can access additional resolutions with a small \"trick\". In your display preferences, hold \"option\" when clicking on \"Scaled\" to see previously hidden resolutions: SwitchResX : In case the above doesn't work for you, SwitchResX is a tool that allows setting user-defined screen resolutions on MacOS. Price : $14 Clarity And Focus \u00b6 Use a clean and focused design for your desktop, dock, status bar, etc. to: avoid dating your assets (remove clocks, assets that may change in future OS versions etc.) avoid distractions to increase students' focus On MacOS, you can remove a lot of the items in your status bar via the System Preferences. A reduced version can look like below: Remove unused items from your doc and keep it focused on dev tools that you are using, e.g.: Additional Tips \u00b6 Increase all font sizes : in your IDE , your browser , and your terminal . Make it big, bigger than you'd think. It's always better to focus on small parts of code and make it easy to read and understand. Increase your cursor size : This makes it easier to orient for your students. In MacOS you can increase the cursor size in Accessibility Settings. General Info \u00b6 This section holds some general answers to questions related to video production. Which Sections Should Have a Video? \u00b6 Every Section should have at least one video. Screencasts offer students a different way to approach the material. They get exposure to a topic that is new for them, and the proof that, and how, it can be done. This makes a big difference in preparing the mind to accept new information. I like it if every new concept that's introduced is shown at least once by the instructor. (Student Quote) Video Screencasts are our online way of walking students through a concept and giving them the high-level understanding and confidence that it can be done. Course Intro & Goodbye Video \u00b6 Every course should have an intro video as well as a goodbye video. Make your students feel welcome and cared for. Introduce yourself as well as your course in the introduction video, and congratulate your students and point them to next steps in your goodbye video. Feel free to record yourself speaking. If you do so, remember to keep your background neutral. These videos can be very short (~1 min). Section Intro Videos \u00b6 Optionally you can create short section introduction videos (~1 min) that audio-visually explain what topics will be addressed in the upcoming course part. For these videos, you can use Google Sheets or PowerPoint to create simple and minimal slides that address the main points the section will be talking about. Screencasts, Slides, Or Face Recording? \u00b6 Most videos should be screencasts . You want to show your students how you code and solve challenges, and get them familiar and comfortable looking at a screen with code. Screencasts with voice narration are therefore the main type of videos you should create for your course. That said, you can always loosen it up and increase retention and enjoyment for your students. You can use slides to introduce new topics and to create recaps at the end of a section. In the intro and goodbye videos, and also sometimes in between, if you feel comfortable with that, you can record yourself talking directly to your students, giving them encouragement. Slides \u00b6 When using slides for any of your videos please use our slides template . Make a copy of the template and create your slides from it. We suggest doing this in order to keep the style consistent across multiple courses. Stick with this basic design . It'll help your students to focus on the essential information. Note : If you are using KeyNote on MacOS, you can download a corresponding Keynote theme here . Please install the suggested fonts locally: Slide Fonts \u00b6 Barlow condensed (titles) Source Sans Pro (text) Roboto Mono (code) You can download them all from here . Video Creation Tips \u00b6 Below are a selection of tips and tricks to keep in mind to amp up your video creation game and assure high-quality, educational screencasts. Tips For Better Quality Screencasts \u00b6 The quality of screencasts can be positively and negatively affected by some aspects that might not be obvious at first. They still have a big impact in how professional your screencast will appear. Stable Table \u00b6 Use A Stable Table. Especially if you use your computer camera to record yourself talking, it is necessary that the setup is stable and doesn't wobble around. Zen Screen \u00b6 To help students focus and make you look more professional, avoid any screen clutter , such as: Distracting wallpapers A cluttered Desktop Too many apps in your Dock Notifications showing up during recording (set the mode to Do not disturb ) Etc. Cultivating a zen screen for your video recordings also makes inconsistencies between different videos less likely. Timeless Videos \u00b6 Avoid showing aspects of your OS that are highly dateable. That includes e.g.: MacOS Dock Windows Start Menu Buttons on top of windows Clock with date and time The easiest way to avoid showing dateable items, is to use the full-screen mode of your text editor. If you need to show your desktop, remove your clock. Relaxed Code \u00b6 Give your viewers some time to see the code you just typed. Pausing for a moment helps students to absorb, type, or pause the video in the right spot without getting stressed. It helps students if they can see the code for a few seconds before you move on. Content-Focus \u00b6 Minimize intro times and start talking about your content right away. Students are here to learn effectively. Occasionally, jokes and break-out moments are encouraged and help to lighten the load, but make sure that overall your videos are effective and content-focused. Large Fonts \u00b6 Use a large font in your editor. Bump up the font size more than you think you should. Usually, you'll focus only on a small section of code at a time. Showing that specific section in a large font is preferable to having a cluttered screen with lots of code in a small font. Students should be able to view your video on a smartphone and still be able to read the code you're writing. Crisp Text \u00b6 Avoid blurry text. This ties in with using a high resolution that allows you to zoom into specific sections of your code when editing the video. High-Contrast Color Schemes \u00b6 We want our videos to be as accessible as possible. Use high-contrast color schemes in your editor to make sure the code is as legible as possible. Avoid \"Smart Quotes\" \u00b6 Don't use unicode smart quotes on your slides, as they cause syntax errors when used in a program. Instead make sure that you use plain quotes in your code examples on slide decks. Keep Your Errors \u00b6 A tutorial teaches two things: the topic of the tutorial how to approach solving problems If it isn't too distracting, keep your mistakes and syntax errors and use them as an opportunity to teach your thought process while debugging. Your viewers will appreciate this as a learning opportunity. Recap Your Videos \u00b6 Remember the three-step teaching process and make sure that you intro and recap the topics of your screencasts. Avoid Swearing \u00b6 It's simple. Don't swear. Tips That Allow Viewers To Follow-Along Easier \u00b6 Orientation \u00b6 Avoid switching tabs, windows, and applications too quickly. State clearly where you are and what you are doing. Context is very important to help absorb new information. Point To Your Code \u00b6 Help your viewers to keep track of what you are talking about by circling the code you want to point to with your cursor. You can enlarge the cursor in your OS's accessibility settings. Avoid Shortcuts \u00b6 Use your cursor and context menus . Keyboard shortcuts are confusing because students can't see what has been clicked. If you must use keyboard shortcuts, limit it to common ones and use software to display the shortcut on screen . Preferably you do everything on screen so that your viewers can follow along. Scroll For Navigation \u00b6 Show your scrolling when navigating within a file. Avoid jumping around or editing out when you scroll. This, again, makes it easier for viewers follow along and stay on track with your explanations. Avoid Background Noise \u00b6 Find a quiet spot for your recording. Audio quality is paramount for screen recordings. Avoid construction noises from outside, pets, ceiling fans, creaky floors and chairs, as well as human-made distracting noises, such as coughing, mouth noises, etc. Avoid Filler Words \u00b6 Attempt to cut down on using filler words, such as ahem , uhm , like , so , you know , etc. Some can be edited-out, but if you use them frequently, it is a ginormous effort to do so. Avoiding to use filler words makes you appear much more competent and makes your content easier to follow. Avoid Visual Distractions \u00b6 If you are recording yourself speaking, use a neutral background that isn't distracting for your viewers. Record Small Chunks \u00b6 Recording smaller chunks will keep your screencast quality high. When recording too much in one take, you might get tired and inattentive without noticing it. Tutoring Instead Of Presenting \u00b6 Imagine that you are speaking to only one person. Students should feel like they are in a mentor-student relationship, rather than sitting in a room full of people in an auditorium or at a conference. Tips For Easier Editing \u00b6 The following suggestions will reduce the time you need to spend on editing. Get into the habit of using these processes early on, your future self will be thankful. Silence While Typing \u00b6 If you are typing a longer section of code that doesn't need explanation on-the-go, avoid talking while typing. The silence makes it easy to edit out or speed up when editing. Title Your Files \u00b6 Use double-digit numbering in combination with the screencast topic's title for naming your video files, e.g.: 01_variables.mov . Clarify Mistakes During Recording \u00b6 When you realize that an explanation isn't working well or when you make a mistake you want to correct, first stop and mention that you'll redo this section. Then pause for a few seconds, undo what you did to get back to the start, pause again, and then start again . This helps to identify necessary edits and makes it easier to get good cuts. Instead of pausing, you can also use a distinct noise, such as snipping your fingers. Add Editing Notes \u00b6 Add a README file with notes for editing to your recorded screencasts. This document should mention: At what timestamp in which video are mistakes --to quicker find and cut them when editing When there should be a screen overlay (e.g. when accidentally mis-naming something while talking) and what should be on the screen overlay Upload \u00b6 Upload the finished recordings to your dedicated shared folder to allow us to give you feedback and add necessary edits. Tips For Getting Comfortable Talking On A Screencast \u00b6 Use the tips mentioned below to get more comfortable talking on a screencast. Like anything, it's a learned skill and you'll get more comfortable as you move along. Research \u00b6 Watch a couple of the videos that other course creators made. Most talk casually. Seeing that might help to give you a realistic idea of how you could do it. Diversify, look at different resources and find someone who you think has a good style. Chances are that you could work similarly. Watch their videos and learn from how they do it. Script \u00b6 Write out the topics you want to talk about for a video, keep notes around on paper or your phone and use them as anchor points when you talk. Double-Take \u00b6 Record the video and say what you want to say without worrying too much about it. Then throw away the audio and record only the audio a second time while you watch yourself do the thing you were doing. That way you already trained talking over it once, plus you only need to focus on one task at a time: first doing, then speaking. Setting Up Video Time Instances \u00b6 Generally, our team will handle uploading the videos to our platform. If you are setting up the Video Time Instances yourself, make sure that the Responsive option is checked in the Embed option of the resource: You should also check Autoplay for your videos, and make sure that the Speed setting is checked: This setting allows learners to change the video speed when watching your lessons.","title":"Creating Videos"},{"location":"08-creating-videos/#creating-videos","text":"This document will guide you in how to create video lessons for your course. Let's start with a tl;dr (but do read over it): Hardware: A good mic is extremely important, also use a pop filter and a mic arm Software: If possible, use screen recording software Screen Resolution: 16:9 Video Length: 3-5 minutes is best, definitely stay below 10 minutes Tone: Your friendly neighborhood coder","title":"Creating Videos"},{"location":"08-creating-videos/#didactic-structure","text":"Same as with your written content: follow the 3-step-teaching principle : Intro : Tell your students what information you will give them Main : Give them that info Recap : Tell them what information they just got","title":"Didactic Structure"},{"location":"08-creating-videos/#screencast-recording-tips","text":"Recording Screencasts - Hardware, Software, Dos and Don'ts (by Wes Bos) Code School Screencasting Framework How To Record a Programming Screencast (by Scott Lilly) How To Create Screencasts That Don\u2019t Suck (by Shawn Hesketh)","title":"Screencast Recording Tips"},{"location":"08-creating-videos/#examples-of-coding-screencasts","text":"Beginner's Guide to JavaScript (by Guil Hernandez) Highly legible coding examples even at small screen sizes, editor is full screen. What's the meaning of underscores (_ & __) in Python variable names? (by Dan Bader) Python Tutorial for Absolute Beginners #1 - What Are Variables? (by YK Suaishita) Python Tutorial for Beginners 8: Functions (by Corey Shafer) Note: Font size could be increased Heres how JavaScript \"Named Params\" Destructuring Works (by Wes Bos) Note: Stopping to show your face after the intro gives more space for your code Heres how React's New Context API Works (by Wes Bos) Note: Removing editor menu bars etc. avoids clutter and dating of the video Free Courses at Vuemastery.com","title":"Examples Of Coding Screencasts"},{"location":"08-creating-videos/#hardware","text":"Great audio quality is extremely important for quality screencasts. Having a good microphone makes up for most of that, but there are also a couple of other things to consider. Read about how to improve your hardware setup for audio recording in this section.","title":"Hardware"},{"location":"08-creating-videos/#microphone","text":"If you are serious about creating quality screencasts, a good microphone is essential. Please contact us if you are building a course but you don't have a quality microphone equipment, since we may be able to support you in purchasing one. Recommendation: \"Audio Technica ATR 2100 USB\" (or \"Samson Q2U\" in Europe). This is a low-price but high-quality microphone that operates over USB. It is small and simple to handle, yet dramatically increases the audio quality as compared to your built-in computer mic.","title":"Microphone"},{"location":"08-creating-videos/#microphone-adjustments","text":"Distance: Aim for 2-20cm (1-8 inches) between your mouth and the microphone. Direction: Aim to speak directly into the mic, not off to the side. Gain: Turn up your gain, but avoid it going too high.","title":"Microphone Adjustments"},{"location":"08-creating-videos/#additional-equipment","text":"Mic Arm: Sinc you will want to have your computer in front of you for coding, a mic arm can help to place the mic where you need it for a good recording outcome. Pop-Filter: Plosives, such as \"p\", \"t\", \"k\", can come out surprisingly loud and disturbing in a spoken audio recording. A pop filter can help to reduce these pop sounds. Headphones: In case that you like to hear your voice during the recording, a pair of headphones will be necessary. Use in-ear headphones to avoid any sound they produce from leaking into your recording. Audio Foam: Using audio foam can reduce room echo. If you have a small room with fabric, such as a walk-in closet, that can also work as an uncomplicated alternative. T-Shirt: No, this is not about getting dressed! Putting a T-Shirt under your laptop while recording can significantly reduce the clicking noise that your computer keys make.","title":"Additional Equipment"},{"location":"08-creating-videos/#software","text":"Most of your videos will be screen recordings . The important part to remember is that we want you to record both your video as well as audio in the highest resolution that makes sense. Large files are not a problem, and having a high video and audio quality allows for more precise editing (e.g. code zooms when necessary) without compromising the viewing experience. Below is a list of software solutions that help you with recording your screen while retaining video quality as well as your personal sanity: QuickTime Player (MacOS): Comes with the OS and is a simple way to get started . Price : Free iShowUInstant (MacOS): Allows to record specific windows and even set the size of a recording screen. Easy to start/pause/stop recordings. Low-cost option that makes already improves your screen recording experience. (I, Martin, use this one. Happy to answer questions about it) Price : $24 OBS Studio (MacOs, Windows, Linux): Free and Open-Source software for video recording and live streaming. Check out these tutorials for Windows or for Linux Price : Free Screen Flow (MacOs): Professional screen recording software with a higher price tag and more features. Price : $129 Camtasia (MacOS, Windows): The biggest and baddest (but in a good way). Includes a full-featured and easy-to-use editing studio as well. Haven't used it myself, but heard good things about it. Probably overkill, though, unless you're really into that. Price : \u20ac269.05","title":"Software"},{"location":"08-creating-videos/#additional-software","text":"KeyCastr (MacOs): you can show key presses on screen, which helps viewers if you're using any keyboard shortcuts. The program allows you to display all key presses or only command keys, and is easy to toggle on and off. Mousepose (MacOs): allows to highlight your cursor to better show clicks and cursor movements on your recording. Alternatively, you can increase your cursor size through your operating system\u2019s accessibility settings.","title":"Additional Software"},{"location":"08-creating-videos/#recording","text":"In this section, you'll find tips that can help you during recording to create the best possible video lessons for your students.","title":"Recording"},{"location":"08-creating-videos/#video-length","text":"3-5 minutes: Keeping your videos short helps both you and your students to stay on track. Aim for 3-5 minutes per video, and definitely stay below 10 minutes. If you are explaining a complex concept that requires more time, split it up in logical chunks that are each below 10 minutes. Keeping our students engaged is paramount, so we want to give them the sense of achievement and completion when finishing a section as often as possible. Our brains are also much better at processing small chunks of information, and it's easier for students to go back and revisit a topic if the videos are on-point, clear, and easy to digest. Shorter videos: You can also create shorter videos, e.g. to introduce a section in the course. Such videos can be only 1 minute long, yet help students to prepare for an upcoming new topic.","title":"Video Length"},{"location":"08-creating-videos/#screen-resolution-and-framerate","text":"Always record in a 16:9 ratio with a framerate of 60 FPS . Don't go below 30 FPS since cursor movements start looking jumpy and are then difficult to follow. To assure the right screen ratio, either set your screen resolution to 16:9 and record fullscreen, or create a defined 16:9 area on your screen and record only that section. Screen recording software can greatly help with both aspects. Fullscreen-Recording : Your screen needs to be set to a 16:9 resolution (e.g. 720p HiDPI (= 1440p real resolution), 1080p or 720p). If your computer doesn't support a 16:9 screen resolution, there are a few hacks you can attempt: External Monitor : If you have access to an external monitor with the right aspect ratio, this can be a great way to go. It also allows you to use your laptop for notes etc. while recording. Hidden Display Options : On some MacBook models and MacOS versions, you can access additional resolutions with a small \"trick\". In your display preferences, hold \"option\" when clicking on \"Scaled\" to see previously hidden resolutions: SwitchResX : In case the above doesn't work for you, SwitchResX is a tool that allows setting user-defined screen resolutions on MacOS. Price : $14","title":"Screen Resolution And Framerate"},{"location":"08-creating-videos/#clarity-and-focus","text":"Use a clean and focused design for your desktop, dock, status bar, etc. to: avoid dating your assets (remove clocks, assets that may change in future OS versions etc.) avoid distractions to increase students' focus On MacOS, you can remove a lot of the items in your status bar via the System Preferences. A reduced version can look like below: Remove unused items from your doc and keep it focused on dev tools that you are using, e.g.:","title":"Clarity And Focus"},{"location":"08-creating-videos/#additional-tips","text":"Increase all font sizes : in your IDE , your browser , and your terminal . Make it big, bigger than you'd think. It's always better to focus on small parts of code and make it easy to read and understand. Increase your cursor size : This makes it easier to orient for your students. In MacOS you can increase the cursor size in Accessibility Settings.","title":"Additional Tips"},{"location":"08-creating-videos/#general-info","text":"This section holds some general answers to questions related to video production.","title":"General Info"},{"location":"08-creating-videos/#which-sections-should-have-a-video","text":"Every Section should have at least one video. Screencasts offer students a different way to approach the material. They get exposure to a topic that is new for them, and the proof that, and how, it can be done. This makes a big difference in preparing the mind to accept new information. I like it if every new concept that's introduced is shown at least once by the instructor. (Student Quote) Video Screencasts are our online way of walking students through a concept and giving them the high-level understanding and confidence that it can be done.","title":"Which Sections Should Have a Video?"},{"location":"08-creating-videos/#course-intro-goodbye-video","text":"Every course should have an intro video as well as a goodbye video. Make your students feel welcome and cared for. Introduce yourself as well as your course in the introduction video, and congratulate your students and point them to next steps in your goodbye video. Feel free to record yourself speaking. If you do so, remember to keep your background neutral. These videos can be very short (~1 min).","title":"Course Intro &amp; Goodbye Video"},{"location":"08-creating-videos/#section-intro-videos","text":"Optionally you can create short section introduction videos (~1 min) that audio-visually explain what topics will be addressed in the upcoming course part. For these videos, you can use Google Sheets or PowerPoint to create simple and minimal slides that address the main points the section will be talking about.","title":"Section Intro Videos"},{"location":"08-creating-videos/#screencasts-slides-or-face-recording","text":"Most videos should be screencasts . You want to show your students how you code and solve challenges, and get them familiar and comfortable looking at a screen with code. Screencasts with voice narration are therefore the main type of videos you should create for your course. That said, you can always loosen it up and increase retention and enjoyment for your students. You can use slides to introduce new topics and to create recaps at the end of a section. In the intro and goodbye videos, and also sometimes in between, if you feel comfortable with that, you can record yourself talking directly to your students, giving them encouragement.","title":"Screencasts, Slides, Or Face Recording?"},{"location":"08-creating-videos/#slides","text":"When using slides for any of your videos please use our slides template . Make a copy of the template and create your slides from it. We suggest doing this in order to keep the style consistent across multiple courses. Stick with this basic design . It'll help your students to focus on the essential information. Note : If you are using KeyNote on MacOS, you can download a corresponding Keynote theme here . Please install the suggested fonts locally:","title":"Slides"},{"location":"08-creating-videos/#slide-fonts","text":"Barlow condensed (titles) Source Sans Pro (text) Roboto Mono (code) You can download them all from here .","title":"Slide Fonts"},{"location":"08-creating-videos/#video-creation-tips","text":"Below are a selection of tips and tricks to keep in mind to amp up your video creation game and assure high-quality, educational screencasts.","title":"Video Creation Tips"},{"location":"08-creating-videos/#tips-for-better-quality-screencasts","text":"The quality of screencasts can be positively and negatively affected by some aspects that might not be obvious at first. They still have a big impact in how professional your screencast will appear.","title":"Tips For Better Quality Screencasts"},{"location":"08-creating-videos/#stable-table","text":"Use A Stable Table. Especially if you use your computer camera to record yourself talking, it is necessary that the setup is stable and doesn't wobble around.","title":"Stable Table"},{"location":"08-creating-videos/#zen-screen","text":"To help students focus and make you look more professional, avoid any screen clutter , such as: Distracting wallpapers A cluttered Desktop Too many apps in your Dock Notifications showing up during recording (set the mode to Do not disturb ) Etc. Cultivating a zen screen for your video recordings also makes inconsistencies between different videos less likely.","title":"Zen Screen"},{"location":"08-creating-videos/#timeless-videos","text":"Avoid showing aspects of your OS that are highly dateable. That includes e.g.: MacOS Dock Windows Start Menu Buttons on top of windows Clock with date and time The easiest way to avoid showing dateable items, is to use the full-screen mode of your text editor. If you need to show your desktop, remove your clock.","title":"Timeless Videos"},{"location":"08-creating-videos/#relaxed-code","text":"Give your viewers some time to see the code you just typed. Pausing for a moment helps students to absorb, type, or pause the video in the right spot without getting stressed. It helps students if they can see the code for a few seconds before you move on.","title":"Relaxed Code"},{"location":"08-creating-videos/#content-focus","text":"Minimize intro times and start talking about your content right away. Students are here to learn effectively. Occasionally, jokes and break-out moments are encouraged and help to lighten the load, but make sure that overall your videos are effective and content-focused.","title":"Content-Focus"},{"location":"08-creating-videos/#large-fonts","text":"Use a large font in your editor. Bump up the font size more than you think you should. Usually, you'll focus only on a small section of code at a time. Showing that specific section in a large font is preferable to having a cluttered screen with lots of code in a small font. Students should be able to view your video on a smartphone and still be able to read the code you're writing.","title":"Large Fonts"},{"location":"08-creating-videos/#crisp-text","text":"Avoid blurry text. This ties in with using a high resolution that allows you to zoom into specific sections of your code when editing the video.","title":"Crisp Text"},{"location":"08-creating-videos/#high-contrast-color-schemes","text":"We want our videos to be as accessible as possible. Use high-contrast color schemes in your editor to make sure the code is as legible as possible.","title":"High-Contrast Color Schemes"},{"location":"08-creating-videos/#avoid-smart-quotes","text":"Don't use unicode smart quotes on your slides, as they cause syntax errors when used in a program. Instead make sure that you use plain quotes in your code examples on slide decks.","title":"Avoid \"Smart Quotes\""},{"location":"08-creating-videos/#keep-your-errors","text":"A tutorial teaches two things: the topic of the tutorial how to approach solving problems If it isn't too distracting, keep your mistakes and syntax errors and use them as an opportunity to teach your thought process while debugging. Your viewers will appreciate this as a learning opportunity.","title":"Keep Your Errors"},{"location":"08-creating-videos/#recap-your-videos","text":"Remember the three-step teaching process and make sure that you intro and recap the topics of your screencasts.","title":"Recap Your Videos"},{"location":"08-creating-videos/#avoid-swearing","text":"It's simple. Don't swear.","title":"Avoid Swearing"},{"location":"08-creating-videos/#tips-that-allow-viewers-to-follow-along-easier","text":"","title":"Tips That Allow Viewers To Follow-Along Easier"},{"location":"08-creating-videos/#orientation","text":"Avoid switching tabs, windows, and applications too quickly. State clearly where you are and what you are doing. Context is very important to help absorb new information.","title":"Orientation"},{"location":"08-creating-videos/#point-to-your-code","text":"Help your viewers to keep track of what you are talking about by circling the code you want to point to with your cursor. You can enlarge the cursor in your OS's accessibility settings.","title":"Point To Your Code"},{"location":"08-creating-videos/#avoid-shortcuts","text":"Use your cursor and context menus . Keyboard shortcuts are confusing because students can't see what has been clicked. If you must use keyboard shortcuts, limit it to common ones and use software to display the shortcut on screen . Preferably you do everything on screen so that your viewers can follow along.","title":"Avoid Shortcuts"},{"location":"08-creating-videos/#scroll-for-navigation","text":"Show your scrolling when navigating within a file. Avoid jumping around or editing out when you scroll. This, again, makes it easier for viewers follow along and stay on track with your explanations.","title":"Scroll For Navigation"},{"location":"08-creating-videos/#avoid-background-noise","text":"Find a quiet spot for your recording. Audio quality is paramount for screen recordings. Avoid construction noises from outside, pets, ceiling fans, creaky floors and chairs, as well as human-made distracting noises, such as coughing, mouth noises, etc.","title":"Avoid Background Noise"},{"location":"08-creating-videos/#avoid-filler-words","text":"Attempt to cut down on using filler words, such as ahem , uhm , like , so , you know , etc. Some can be edited-out, but if you use them frequently, it is a ginormous effort to do so. Avoiding to use filler words makes you appear much more competent and makes your content easier to follow.","title":"Avoid Filler Words"},{"location":"08-creating-videos/#avoid-visual-distractions","text":"If you are recording yourself speaking, use a neutral background that isn't distracting for your viewers.","title":"Avoid Visual Distractions"},{"location":"08-creating-videos/#record-small-chunks","text":"Recording smaller chunks will keep your screencast quality high. When recording too much in one take, you might get tired and inattentive without noticing it.","title":"Record Small Chunks"},{"location":"08-creating-videos/#tutoring-instead-of-presenting","text":"Imagine that you are speaking to only one person. Students should feel like they are in a mentor-student relationship, rather than sitting in a room full of people in an auditorium or at a conference.","title":"Tutoring Instead Of Presenting"},{"location":"08-creating-videos/#tips-for-easier-editing","text":"The following suggestions will reduce the time you need to spend on editing. Get into the habit of using these processes early on, your future self will be thankful.","title":"Tips For Easier Editing"},{"location":"08-creating-videos/#silence-while-typing","text":"If you are typing a longer section of code that doesn't need explanation on-the-go, avoid talking while typing. The silence makes it easy to edit out or speed up when editing.","title":"Silence While Typing"},{"location":"08-creating-videos/#title-your-files","text":"Use double-digit numbering in combination with the screencast topic's title for naming your video files, e.g.: 01_variables.mov .","title":"Title Your Files"},{"location":"08-creating-videos/#clarify-mistakes-during-recording","text":"When you realize that an explanation isn't working well or when you make a mistake you want to correct, first stop and mention that you'll redo this section. Then pause for a few seconds, undo what you did to get back to the start, pause again, and then start again . This helps to identify necessary edits and makes it easier to get good cuts. Instead of pausing, you can also use a distinct noise, such as snipping your fingers.","title":"Clarify Mistakes During Recording"},{"location":"08-creating-videos/#add-editing-notes","text":"Add a README file with notes for editing to your recorded screencasts. This document should mention: At what timestamp in which video are mistakes --to quicker find and cut them when editing When there should be a screen overlay (e.g. when accidentally mis-naming something while talking) and what should be on the screen overlay","title":"Add Editing Notes"},{"location":"08-creating-videos/#upload","text":"Upload the finished recordings to your dedicated shared folder to allow us to give you feedback and add necessary edits.","title":"Upload"},{"location":"08-creating-videos/#tips-for-getting-comfortable-talking-on-a-screencast","text":"Use the tips mentioned below to get more comfortable talking on a screencast. Like anything, it's a learned skill and you'll get more comfortable as you move along.","title":"Tips For Getting Comfortable Talking On A Screencast"},{"location":"08-creating-videos/#research","text":"Watch a couple of the videos that other course creators made. Most talk casually. Seeing that might help to give you a realistic idea of how you could do it. Diversify, look at different resources and find someone who you think has a good style. Chances are that you could work similarly. Watch their videos and learn from how they do it.","title":"Research"},{"location":"08-creating-videos/#script","text":"Write out the topics you want to talk about for a video, keep notes around on paper or your phone and use them as anchor points when you talk.","title":"Script"},{"location":"08-creating-videos/#double-take","text":"Record the video and say what you want to say without worrying too much about it. Then throw away the audio and record only the audio a second time while you watch yourself do the thing you were doing. That way you already trained talking over it once, plus you only need to focus on one task at a time: first doing, then speaking.","title":"Double-Take"},{"location":"08-creating-videos/#setting-up-video-time-instances","text":"Generally, our team will handle uploading the videos to our platform. If you are setting up the Video Time Instances yourself, make sure that the Responsive option is checked in the Embed option of the resource: You should also check Autoplay for your videos, and make sure that the Speed setting is checked: This setting allows learners to change the video speed when watching your lessons.","title":"Setting Up Video Time Instances"},{"location":"09-forum/","text":"CodingNomads Forum \u00b6 We want the forum to be an active place to share and discuss course content, coding challenges, tech news and tips, professional development, etc. Seed Posts (Getting Started) \u00b6 Every Course should include an introduction to our forum. This introduction should include links to posts of general interest, that will help students getting started with our Learning Platform, and our Forum. Please encourage students to use the forum and include references to the following posts: Offline Access To Course Materials Using The Mobile App How To Ask a Question How To Format Your Code Example Resource \u00b6 You can copy+paste one of the example resources below into your course, or write a new one following a similar example: Using Your Community Forum (Django) Using Your Forum (Python)","title":"CodingNomads Forum"},{"location":"09-forum/#codingnomads-forum","text":"We want the forum to be an active place to share and discuss course content, coding challenges, tech news and tips, professional development, etc.","title":"CodingNomads Forum"},{"location":"09-forum/#seed-posts-getting-started","text":"Every Course should include an introduction to our forum. This introduction should include links to posts of general interest, that will help students getting started with our Learning Platform, and our Forum. Please encourage students to use the forum and include references to the following posts: Offline Access To Course Materials Using The Mobile App How To Ask a Question How To Format Your Code","title":"Seed Posts (Getting Started)"},{"location":"09-forum/#example-resource","text":"You can copy+paste one of the example resources below into your course, or write a new one following a similar example: Using Your Community Forum (Django) Using Your Forum (Python)","title":"Example Resource"},{"location":"10-publishing-pipeline/","text":"Course Publishing Pipeline \u00b6 We might set up a Trello board to track courses through the different phases of their creation, and assist in moving it along in a realistic pace. The following phases will correspond to Trello columns, and courses can be moved along the pipeline as they progress. Phases \u00b6 Course Idea Collection: Collect ideas for possible course topics (course author, team) Research & Outline: After selecting a course topic you will take on, create an outline of the course (course author) Outline Review: Someone from our team will give you feedback on the course outline (team) Create Content: In this phase, you'll create the main part of the course or course section. You are encouraged to reach out for feedback any time (course author) Review: To assure that the content is consistent with the quality we want on our platform, we will review the content you create regarding technical accuracy, didactic value, and correct language. The content creation creation and review processes should go hand-in-hand to build the course incrementally and iterate over early feedback (team) Marketing: After the content is done, you will get in contact with our marketing team and iterate with them on your course syllabus document and marketing webpage. Make sure that the technical information provided is accurate and comprehensive, and tells a good story for potential students Published: \ud83c\udf89 Well done! Time for a break! Feedback & Updates: No course is ever really finished. In this phase we will apply the feedback we receive from active students to continually improve the course content (course author) Note On Course Maintenance And Updates \u00b6 Iteration is at the heart of everything in course development. As the course creator you will have certain blind spots that only students that go through the learning experience will uncover. This is unavoidable and an important part of the course creation process. That is why we consider this initial phase of \"course maintenance and updates\" still as a part of the course creation. As a course creator, you are therefore required to maintain and update your course during the beta phase while the first 10 beta students learn from your material and send us their feedback. Responding to the suggestions of our beta students finally brings your excellent course content under real-world learner testing (RWLT) and thereby helps to polish it to perfection.","title":"Course Publishing Pipeline"},{"location":"10-publishing-pipeline/#course-publishing-pipeline","text":"We might set up a Trello board to track courses through the different phases of their creation, and assist in moving it along in a realistic pace. The following phases will correspond to Trello columns, and courses can be moved along the pipeline as they progress.","title":"Course Publishing Pipeline"},{"location":"10-publishing-pipeline/#phases","text":"Course Idea Collection: Collect ideas for possible course topics (course author, team) Research & Outline: After selecting a course topic you will take on, create an outline of the course (course author) Outline Review: Someone from our team will give you feedback on the course outline (team) Create Content: In this phase, you'll create the main part of the course or course section. You are encouraged to reach out for feedback any time (course author) Review: To assure that the content is consistent with the quality we want on our platform, we will review the content you create regarding technical accuracy, didactic value, and correct language. The content creation creation and review processes should go hand-in-hand to build the course incrementally and iterate over early feedback (team) Marketing: After the content is done, you will get in contact with our marketing team and iterate with them on your course syllabus document and marketing webpage. Make sure that the technical information provided is accurate and comprehensive, and tells a good story for potential students Published: \ud83c\udf89 Well done! Time for a break! Feedback & Updates: No course is ever really finished. In this phase we will apply the feedback we receive from active students to continually improve the course content (course author)","title":"Phases"},{"location":"10-publishing-pipeline/#note-on-course-maintenance-and-updates","text":"Iteration is at the heart of everything in course development. As the course creator you will have certain blind spots that only students that go through the learning experience will uncover. This is unavoidable and an important part of the course creation process. That is why we consider this initial phase of \"course maintenance and updates\" still as a part of the course creation. As a course creator, you are therefore required to maintain and update your course during the beta phase while the first 10 beta students learn from your material and send us their feedback. Responding to the suggestions of our beta students finally brings your excellent course content under real-world learner testing (RWLT) and thereby helps to polish it to perfection.","title":"Note On Course Maintenance And Updates"},{"location":"11-platform-style/","text":"Consistently Styled Course Content \u00b6 Note: Use Markdown to create your course content. It will make most of the below information irrelevant to you. If you feel the need to style more individually, use Bootstrap classes . Bootstrap is included in the theme we're using. Only if neither fulfills your creative urges, read on for more fine-grained styling. Objective \u00b6 We want unified and adaptable styling across all courses on the whole site. Simple : Simple elements are favored over complex ones, because they are easier to set up and maintain Reusable : Allow Bootstrap to style your page, it's already included. Maintainable : Through consistent and simple structure, we can adapt styles centrally and avoid unnecessary effort and potential misalignment Therefore, we ask you to use simple HTML (e.g. through using the Markdown editor or the WYSIWYG editor) and customize the resulting HTML only minimally, with the following custom components: Custom Components \u00b6 Additional custom components you can use when creating and editing courses. Course Overview Page Additional Styling \u00b6 The following adaptations should be used to make the course overview page styled consistently and easier readable for students. Section Dividers \u00b6 To improve the visual flow in a course overview, you can add colored bars to further break up the content of a section. Section Dividers: These can be used to sub-divide a section into chapters and give it a relevant chapter heading. Create a \"Tag Resource\" on the platform, and add the following HTML code in the HTML editor: <h5 class=\"section-divider\">Relevant Chapter Heading</h5> Assignment Dividers: To indicate to students that the following materials require their own input, we use differently-colored dividers for a section that consist of instructions for mini-projects, quizzes, etc. You can create such a divider also using the \"Tag Resource\" and entering the following HTML code in the HTML editor: <h5 class=\"section-assignment\">Assignments</h5> Module Tags \u00b6 Module tags in the \"Summary\" of each section help students stay on track and visually bundle multiple sections logically together. Switch off blue and yellow tags for better visual grouping. Blue: <div class=\"d-flex flex-row-reverse\"> <span class=\"badge badge-pill badge-primary\"> Module 1 </span> </div> Yellow: <div class=\"d-flex flex-row-reverse\"> <span class=\"badge badge-pill badge-warning\"> Module 2 </span> </div> Page Resources Individual Styling \u00b6 The following custom style elements should be considered when creating written documentation for your course content. Headings \u00b6 In the visual editor , use editor-provided headings levels: \"Heading (large)\" option creates <h3> element \"Heading (medium)\" option creates <h4> element \"Heading (small)\" option creates <h5> element Don't apply any editor styles to your headings. We want to avoid individually bolded headings. Avoiding individual styles allows us to increase heading size, font-weight, etc. centrally through SCSS. In Markdown , use the equivalent heading levels that the visual editor uses: Top-level heading: ### Second-level heading: #### Lowest-level heading: ##### Information And Alert Boxes \u00b6 Add disclaimers as alert alert-warning boxes when a new concept is mentioned but not yet deeply explained. You want to avoid students feeling like this (student quote): you know, I think my main issue is if I get to a page, and the way it is written implies I should already understand it, but it is completely new and unfamiliar. It has me worrying that it is obvious and I am the only one just not getting it. To avoid this frustration, use the Bootstrap alert box with a short note for criticial information and gotchas. E.g.: \"Just read over this for now, we'll dig deeper into it in a later section.\" <div class=\"alert alert-warning\" role=\"alert\"> <strong>Note:</strong> Take care to avoid xyz. </div> Use alert alert-info to include additional information e.g. on external resources that can lead students further onwards. E.g.: <div class=\"alert alert-info\" role=\"alert\"> <strong>Info:</strong> The first bug was a real bug! </div> The Bootstrap alert boxes also help to visually break up a long piece of content by highlighting an important section. Note: If you need to use multiple lines in your alert boxes, use <br> tags to create newlines (instead of using <p> tags). This results in nicer-looking alert boxes without additional spacing. Code Blocks \u00b6 Wrap code snippets into triple-backticks. This works both in Markdown as well as the visual editor: ```python print(\"your code here\") ``` Note: Syntax highlighting can sometimes be broken. This might be annoying and we hope to find a fix that'll solve it site-wise. In-line Code \u00b6 In Markdown , simply wrap your in-line code into single backticks . In the visual editor , there is no button for marking a section of text as inline code. Therefore, you will need to switch to the HTML editor and wrap in-line code snippets into <code>your_code()</code> tags. Embedded Resources \u00b6 For external videos that are not hosted on our vimeo account and e.g. external code playgrounds, use Bootstraps responsive embed class : <div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"your_embed_url\" allowfullscreen></iframe> </div> Resources \u00b6 <div class=\"jumbotron resources\"> <h1>Resources</h1> </div> Paste the above HTML snippet into the HTML editor of your resource. Next, switch back to the WYSIWYG editor view and copy-paste your resource links into the body of the jumbotron. Style them as a bullet point list. Result: Quotes \u00b6 To highlight a section of your documentation as a quote, please use the Bootstrap-provided blockquote HTML : <blockquote class=\"blockquote text-right\"> <p class=\"mb-0\"> [...] programs must be written for people to read, and only incidentally for machines to execute. </p> <footer class=\"blockquote-footer\"> Abelson & Sussman in <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-7.html#%_chap_Temp_4\" ><cite title=\"Structure and Interpretation of Computer Programs\" >Structure and Interpretation of Computer Programs</cite ></a > </footer> </blockquote> We are applying some custom CSS to it to make the quotes look like shown below: LaTeX \u00b6 If you use LaTeX for formulas, you'll have an easier time using the WYSIWYG editor. You can render block and inline LaTeX by following moodle's LaTeX syntax . Here's how to switch your editor . If you want to use LaTeX with the Marklar Markdown editor, keep in mind that it only supports LaTeX blocks : $$content$$ E.g. in order to display the following formula correctly rendered like so: You can write the following in the Marklar editor: $$\\text{EMA}_{t}=[V_t \\times (\\frac d {1+n})] + \\text{EMA}_y \\times [1 - \\frac d {1+n}]$$ For more information, refer to the LaTeX docs . Note: If you need to use a couple of single-line LaTeX in a row, e.g. for explaining the contents of a formula in more detail, we suggest to use a Bootstrap table for easier viewing, e.g.: <table class=\"table\"> <tbody> <tr> <th scope=\"row\">1</th> <td>$$\\text{EMA}_t=\\text{EMA today}$$</td> </tr> <tr> <th scope=\"row\">2</th> <td>$$p_t=\\text{price today}$$</td> </tr> <tr> <th scope=\"row\">3</th> <td>$$\\text{EMA}_y=\\text{EMA yesterday}$$</td> </tr> </tbody> </table> Renders to: Video Slides \u00b6 To keep a unified style across our different courses, use the Slide Template (or corresponding Keynote Theme ). More information in the dedicated Video Slides section. Brand Colors \u00b6 In case you need to highlight something, focus on using the following colors that reflect the colors in the CodingNomads logo: primary: sea blue Hex value: #0071BD RGB code: rbg(0, 113, 189) HSV: hsv(204.13, 100%, 74.12%) secondary: sunset yellow (outermost) Hex value: #FBB03B RGB code: rbg(251, 176, 59) HSV: hsv(36.56, 76.49%, 98.43%) The general theme settings for our brand communication could reflect these two colors as primary (sea-blue) and secondary (sunset-yellow) brand colors. Fonts \u00b6 When creating any content that includes fonts outside of our learning platform (e.g. Video Slides), stick to using the following fonts: Barlow condensed (titles) Source Sans Pro (text) Roboto Mono (code) You can download them all from here .","title":"Consistently Styled Course Content"},{"location":"11-platform-style/#consistently-styled-course-content","text":"Note: Use Markdown to create your course content. It will make most of the below information irrelevant to you. If you feel the need to style more individually, use Bootstrap classes . Bootstrap is included in the theme we're using. Only if neither fulfills your creative urges, read on for more fine-grained styling.","title":"Consistently Styled Course Content"},{"location":"11-platform-style/#objective","text":"We want unified and adaptable styling across all courses on the whole site. Simple : Simple elements are favored over complex ones, because they are easier to set up and maintain Reusable : Allow Bootstrap to style your page, it's already included. Maintainable : Through consistent and simple structure, we can adapt styles centrally and avoid unnecessary effort and potential misalignment Therefore, we ask you to use simple HTML (e.g. through using the Markdown editor or the WYSIWYG editor) and customize the resulting HTML only minimally, with the following custom components:","title":"Objective"},{"location":"11-platform-style/#custom-components","text":"Additional custom components you can use when creating and editing courses.","title":"Custom Components"},{"location":"11-platform-style/#course-overview-page-additional-styling","text":"The following adaptations should be used to make the course overview page styled consistently and easier readable for students.","title":"Course Overview Page Additional Styling"},{"location":"11-platform-style/#section-dividers","text":"To improve the visual flow in a course overview, you can add colored bars to further break up the content of a section. Section Dividers: These can be used to sub-divide a section into chapters and give it a relevant chapter heading. Create a \"Tag Resource\" on the platform, and add the following HTML code in the HTML editor: <h5 class=\"section-divider\">Relevant Chapter Heading</h5> Assignment Dividers: To indicate to students that the following materials require their own input, we use differently-colored dividers for a section that consist of instructions for mini-projects, quizzes, etc. You can create such a divider also using the \"Tag Resource\" and entering the following HTML code in the HTML editor: <h5 class=\"section-assignment\">Assignments</h5>","title":"Section Dividers"},{"location":"11-platform-style/#module-tags","text":"Module tags in the \"Summary\" of each section help students stay on track and visually bundle multiple sections logically together. Switch off blue and yellow tags for better visual grouping. Blue: <div class=\"d-flex flex-row-reverse\"> <span class=\"badge badge-pill badge-primary\"> Module 1 </span> </div> Yellow: <div class=\"d-flex flex-row-reverse\"> <span class=\"badge badge-pill badge-warning\"> Module 2 </span> </div>","title":"Module Tags"},{"location":"11-platform-style/#page-resources-individual-styling","text":"The following custom style elements should be considered when creating written documentation for your course content.","title":"Page Resources Individual Styling"},{"location":"11-platform-style/#headings","text":"In the visual editor , use editor-provided headings levels: \"Heading (large)\" option creates <h3> element \"Heading (medium)\" option creates <h4> element \"Heading (small)\" option creates <h5> element Don't apply any editor styles to your headings. We want to avoid individually bolded headings. Avoiding individual styles allows us to increase heading size, font-weight, etc. centrally through SCSS. In Markdown , use the equivalent heading levels that the visual editor uses: Top-level heading: ### Second-level heading: #### Lowest-level heading: #####","title":"Headings"},{"location":"11-platform-style/#information-and-alert-boxes","text":"Add disclaimers as alert alert-warning boxes when a new concept is mentioned but not yet deeply explained. You want to avoid students feeling like this (student quote): you know, I think my main issue is if I get to a page, and the way it is written implies I should already understand it, but it is completely new and unfamiliar. It has me worrying that it is obvious and I am the only one just not getting it. To avoid this frustration, use the Bootstrap alert box with a short note for criticial information and gotchas. E.g.: \"Just read over this for now, we'll dig deeper into it in a later section.\" <div class=\"alert alert-warning\" role=\"alert\"> <strong>Note:</strong> Take care to avoid xyz. </div> Use alert alert-info to include additional information e.g. on external resources that can lead students further onwards. E.g.: <div class=\"alert alert-info\" role=\"alert\"> <strong>Info:</strong> The first bug was a real bug! </div> The Bootstrap alert boxes also help to visually break up a long piece of content by highlighting an important section. Note: If you need to use multiple lines in your alert boxes, use <br> tags to create newlines (instead of using <p> tags). This results in nicer-looking alert boxes without additional spacing.","title":"Information And Alert Boxes"},{"location":"11-platform-style/#code-blocks","text":"Wrap code snippets into triple-backticks. This works both in Markdown as well as the visual editor: ```python print(\"your code here\") ``` Note: Syntax highlighting can sometimes be broken. This might be annoying and we hope to find a fix that'll solve it site-wise.","title":"Code Blocks"},{"location":"11-platform-style/#in-line-code","text":"In Markdown , simply wrap your in-line code into single backticks . In the visual editor , there is no button for marking a section of text as inline code. Therefore, you will need to switch to the HTML editor and wrap in-line code snippets into <code>your_code()</code> tags.","title":"In-line Code"},{"location":"11-platform-style/#embedded-resources","text":"For external videos that are not hosted on our vimeo account and e.g. external code playgrounds, use Bootstraps responsive embed class : <div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"your_embed_url\" allowfullscreen></iframe> </div>","title":"Embedded Resources"},{"location":"11-platform-style/#resources","text":"<div class=\"jumbotron resources\"> <h1>Resources</h1> </div> Paste the above HTML snippet into the HTML editor of your resource. Next, switch back to the WYSIWYG editor view and copy-paste your resource links into the body of the jumbotron. Style them as a bullet point list. Result:","title":"Resources"},{"location":"11-platform-style/#quotes","text":"To highlight a section of your documentation as a quote, please use the Bootstrap-provided blockquote HTML : <blockquote class=\"blockquote text-right\"> <p class=\"mb-0\"> [...] programs must be written for people to read, and only incidentally for machines to execute. </p> <footer class=\"blockquote-footer\"> Abelson & Sussman in <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-7.html#%_chap_Temp_4\" ><cite title=\"Structure and Interpretation of Computer Programs\" >Structure and Interpretation of Computer Programs</cite ></a > </footer> </blockquote> We are applying some custom CSS to it to make the quotes look like shown below:","title":"Quotes"},{"location":"11-platform-style/#latex","text":"If you use LaTeX for formulas, you'll have an easier time using the WYSIWYG editor. You can render block and inline LaTeX by following moodle's LaTeX syntax . Here's how to switch your editor . If you want to use LaTeX with the Marklar Markdown editor, keep in mind that it only supports LaTeX blocks : $$content$$ E.g. in order to display the following formula correctly rendered like so: You can write the following in the Marklar editor: $$\\text{EMA}_{t}=[V_t \\times (\\frac d {1+n})] + \\text{EMA}_y \\times [1 - \\frac d {1+n}]$$ For more information, refer to the LaTeX docs . Note: If you need to use a couple of single-line LaTeX in a row, e.g. for explaining the contents of a formula in more detail, we suggest to use a Bootstrap table for easier viewing, e.g.: <table class=\"table\"> <tbody> <tr> <th scope=\"row\">1</th> <td>$$\\text{EMA}_t=\\text{EMA today}$$</td> </tr> <tr> <th scope=\"row\">2</th> <td>$$p_t=\\text{price today}$$</td> </tr> <tr> <th scope=\"row\">3</th> <td>$$\\text{EMA}_y=\\text{EMA yesterday}$$</td> </tr> </tbody> </table> Renders to:","title":"LaTeX"},{"location":"11-platform-style/#video-slides","text":"To keep a unified style across our different courses, use the Slide Template (or corresponding Keynote Theme ). More information in the dedicated Video Slides section.","title":"Video Slides"},{"location":"11-platform-style/#brand-colors","text":"In case you need to highlight something, focus on using the following colors that reflect the colors in the CodingNomads logo: primary: sea blue Hex value: #0071BD RGB code: rbg(0, 113, 189) HSV: hsv(204.13, 100%, 74.12%) secondary: sunset yellow (outermost) Hex value: #FBB03B RGB code: rbg(251, 176, 59) HSV: hsv(36.56, 76.49%, 98.43%) The general theme settings for our brand communication could reflect these two colors as primary (sea-blue) and secondary (sunset-yellow) brand colors.","title":"Brand Colors"},{"location":"11-platform-style/#fonts","text":"When creating any content that includes fonts outside of our learning platform (e.g. Video Slides), stick to using the following fonts: Barlow condensed (titles) Source Sans Pro (text) Roboto Mono (code) You can download them all from here .","title":"Fonts"},{"location":"12-snippets-reference/","text":"Component Snippets \u00b6 This is a quick reference to the HTML snippets used in our courses to build recurring elements ( longer description here ). Most of them are based on Bootstrap. You can read more on the relevant Bootstrap classes by clicking the snippets title. Module Tags \u00b6 Blue: <div class=\"d-flex flex-row-reverse\"> <span class=\"badge badge-pill badge-primary\"> Module 1 </span> </div> Yellow: <div class=\"d-flex flex-row-reverse\"> <span class=\"badge badge-pill badge-warning\"> Module 2 </span> </div> Section Dividers \u00b6 Section Dividers (blue): <h5 class=\"section-divider\">Chapter Heading</h5> Assignment Dividers (yellow): <h5 class=\"section-assignment\">Assignments</h5> Headings \u00b6 Use Markdown for headings, and start your highest-level at <h3> (or ### in Markdown). Avoid applying additional styling in the platform internal editor or through custom HTML classes and CSS. Color-Highlighted Alert & Information Boxes \u00b6 Information Box (blue): <div class=\"alert alert-info\" role=\"alert\"> <strong>Info:</strong> Highlights interesting (additional) information. </div> Note Box (yellow): <div class=\"alert alert-warning\" role=\"alert\"> <strong>Note:</strong> Important infos about upcoming course sections, or potential gotchas. </div> Resources \u00b6 <div class=\"jumbotron resources\"> <h1>Resources</h1> </div> Quotes \u00b6 <blockquote class=\"blockquote text-right\"> <p class=\"mb-0\">insert quote text.</p> <footer class=\"blockquote-footer\">who <a href=\"\"><cite title=\"source title\">source title</cite></a></footer> </blockquote> Code Blocks \u00b6 Use Markdown to create code blocks. ```python print(\"your code here\") ``` In-Line Code \u00b6 Use Markdown to create in-line-code snippets: `my_funct()` In the platform's HTML editor you can create them like this: <code>your_code_here()</code> <iframe> Embeds \u00b6 <div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"your_embed_url\" allowfullscreen></iframe> </div> LaTeX Fomulas \u00b6 Use LaTeX block syntax in Markdown: $$content$$ Use Moodle's LaTeX syntax with the WYSIWYG editor. Have a nice day!","title":"Component Snippets"},{"location":"12-snippets-reference/#component-snippets","text":"This is a quick reference to the HTML snippets used in our courses to build recurring elements ( longer description here ). Most of them are based on Bootstrap. You can read more on the relevant Bootstrap classes by clicking the snippets title.","title":"Component Snippets"},{"location":"12-snippets-reference/#module-tags","text":"Blue: <div class=\"d-flex flex-row-reverse\"> <span class=\"badge badge-pill badge-primary\"> Module 1 </span> </div> Yellow: <div class=\"d-flex flex-row-reverse\"> <span class=\"badge badge-pill badge-warning\"> Module 2 </span> </div>","title":"Module Tags"},{"location":"12-snippets-reference/#section-dividers","text":"Section Dividers (blue): <h5 class=\"section-divider\">Chapter Heading</h5> Assignment Dividers (yellow): <h5 class=\"section-assignment\">Assignments</h5>","title":"Section Dividers"},{"location":"12-snippets-reference/#headings","text":"Use Markdown for headings, and start your highest-level at <h3> (or ### in Markdown). Avoid applying additional styling in the platform internal editor or through custom HTML classes and CSS.","title":"Headings"},{"location":"12-snippets-reference/#color-highlighted-alert-information-boxes","text":"Information Box (blue): <div class=\"alert alert-info\" role=\"alert\"> <strong>Info:</strong> Highlights interesting (additional) information. </div> Note Box (yellow): <div class=\"alert alert-warning\" role=\"alert\"> <strong>Note:</strong> Important infos about upcoming course sections, or potential gotchas. </div>","title":"Color-Highlighted Alert &amp; Information Boxes"},{"location":"12-snippets-reference/#resources","text":"<div class=\"jumbotron resources\"> <h1>Resources</h1> </div>","title":"Resources"},{"location":"12-snippets-reference/#quotes","text":"<blockquote class=\"blockquote text-right\"> <p class=\"mb-0\">insert quote text.</p> <footer class=\"blockquote-footer\">who <a href=\"\"><cite title=\"source title\">source title</cite></a></footer> </blockquote>","title":"Quotes"},{"location":"12-snippets-reference/#code-blocks","text":"Use Markdown to create code blocks. ```python print(\"your code here\") ```","title":"Code Blocks"},{"location":"12-snippets-reference/#in-line-code","text":"Use Markdown to create in-line-code snippets: `my_funct()` In the platform's HTML editor you can create them like this: <code>your_code_here()</code>","title":"In-Line Code"},{"location":"12-snippets-reference/#iframe-embeds","text":"<div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"your_embed_url\" allowfullscreen></iframe> </div>","title":"&lt;iframe&gt; Embeds"},{"location":"12-snippets-reference/#latex-fomulas","text":"Use LaTeX block syntax in Markdown: $$content$$ Use Moodle's LaTeX syntax with the WYSIWYG editor. Have a nice day!","title":"LaTeX Fomulas"},{"location":"_scratch/","text":"Creator Call \u00b6 short screencast videos - what needs to be done? call about pedagogy how to best teach content? Welcome: who's who, what course first batch of content creators Creator Docs stay DRM-free, don't plagiarize Our Platform copy a slice of an existing course to jumpstart Quizzes Adaptive Mode for everything CodeRunner Open-ended text questions Early Feedback share content while in development, let's chat about it Questions? Jupyter Labs Server --> let's try it out Organization During Development \u00b6 Explore whether it makes sense to use Trello boards on a per-course basis. General Course Settings \u00b6 set up auto-completion course-wide as follows: insert settings Content \u00b6 stay DRM-free! We don't want to plagiarize. Images: Only use images you made yourself or that are in the public domain. Creative Commons requires attribution, so post a link. External Learning Resources: Link to great external resources you know of. Our main goal is for students to learn the topics. We want external resources to be clearly labeled and an addition to our course content, not a replacement In-course quizzes \u00b6 quick and direct feedback - use \"Adaptive Mode\" general quiz set-up guidelines sololearn style check-in quizzes Bootstrap Elements We Use \u00b6 Avoid styling pages in the editor, it makes it individual and difficult to globally adapt and keep in sync. Best way is to use Markdown with only little extra styling. headings (avoid bolding etc in editor) jumbotron resources Collapsible also cool for resources create a PHP button to insert the HTML for such snippets? code blocks for different languages (plugins!) Thoughts \u00b6 \u201cWorkshop\u201d resource for peer reviewed content Mobile \u00b6 Mobile site available at https://platform.codingnomads.co/learn Tried it, works, and looks good! :) Parking Space for Unused or Removed Documentation \u00b6 Open-Ended Text Questions \u00b6 Open-ended questions should allow students to research concepts themselves, as well as guide them through sample responses, and finally also automatically mark a quiz as completed when a student gave their answer to all quiz questions. To accomplish this in Moodle's question context, we use questions of the type Essay (auto-graded) . The current setup: marks a student correct once they enter at least one character provides a sample answer when pressing the check button includes a reminder to compare and ask further questions to mentors/on the forum marks the quiz as completed when all questions have been answered Set the stage: Use this information-question as the first question of each open-ended quiz you create. It will signify to students that they are entering exploration mode, as well as provide useful tips and a link to our forum. How To Set Up Open-Ended Text Questions \u00b6 In the Question Bank, create a new Category for the course section you are creating a quiz for. The suggested question type to use for questions that are designed to prompt students to think and formulate their own answers, is Essay (autograded) . In Combined Feedback / \"For any correct response\" enter: the disclaimer alert box the sample answer Code for Disclaimer Alert Box: <div class=\"alert alert-success\" role=\"alert\"> <strong>Thanks for submitting!</strong> You can compare your answer to our <strong>sample response</strong> below. Since these are open-ended questions, the answers might not match completely. Please discuss any further questions with your mentor and on <a href=\"https://forum.codingnomads.co/\" target=\"_blank\" class=\"alert-link\">our forum</a>. </div> In order to use the default auto-grading, specify a minimum number of characters to be used. This needs to be >0 (e.g. 1 ). If this setting is left at 0 , then students will receive an \"Incorrect\" mark when submitting any written content. In Auto-Grading change to \"Characters\" and \"1\" in the respective boxes: Finally, in the Multiple tries section, set the \"Penalty for each incorrect try\" to 0% : Optional Settings \u00b6 You can also change the input size of the answer text field: You can also add tags to each question: Regex Short-Answer Questions \u00b6 These work great for giving some more flexibility to students' answers. https://docs.moodle.org/37/en/Regular_Expression_Short-Answer_question_type You can: write Regex to specify a limited set of answers : Q: Write one keyword that is part of a Python conditional A: (if|elif|else) write Regex to exclude a wide set of wrong answers Q: Note: The plugin is designed to prevent using correct answers that have endless possibilities--therefore the use of Regex for correct answers is limited. This is purposefully designed like that. However, whole power of regex is available to you to identify incorrect answers, while needing to be specific with correct answers.","title":"Creator Call"},{"location":"_scratch/#creator-call","text":"short screencast videos - what needs to be done? call about pedagogy how to best teach content? Welcome: who's who, what course first batch of content creators Creator Docs stay DRM-free, don't plagiarize Our Platform copy a slice of an existing course to jumpstart Quizzes Adaptive Mode for everything CodeRunner Open-ended text questions Early Feedback share content while in development, let's chat about it Questions? Jupyter Labs Server --> let's try it out","title":"Creator Call"},{"location":"_scratch/#organization-during-development","text":"Explore whether it makes sense to use Trello boards on a per-course basis.","title":"Organization During Development"},{"location":"_scratch/#general-course-settings","text":"set up auto-completion course-wide as follows: insert settings","title":"General Course Settings"},{"location":"_scratch/#content","text":"stay DRM-free! We don't want to plagiarize. Images: Only use images you made yourself or that are in the public domain. Creative Commons requires attribution, so post a link. External Learning Resources: Link to great external resources you know of. Our main goal is for students to learn the topics. We want external resources to be clearly labeled and an addition to our course content, not a replacement","title":"Content"},{"location":"_scratch/#in-course-quizzes","text":"quick and direct feedback - use \"Adaptive Mode\" general quiz set-up guidelines sololearn style check-in quizzes","title":"In-course quizzes"},{"location":"_scratch/#bootstrap-elements-we-use","text":"Avoid styling pages in the editor, it makes it individual and difficult to globally adapt and keep in sync. Best way is to use Markdown with only little extra styling. headings (avoid bolding etc in editor) jumbotron resources Collapsible also cool for resources create a PHP button to insert the HTML for such snippets? code blocks for different languages (plugins!)","title":"Bootstrap Elements We Use"},{"location":"_scratch/#thoughts","text":"\u201cWorkshop\u201d resource for peer reviewed content","title":"Thoughts"},{"location":"_scratch/#mobile","text":"Mobile site available at https://platform.codingnomads.co/learn Tried it, works, and looks good! :)","title":"Mobile"},{"location":"_scratch/#parking-space-for-unused-or-removed-documentation","text":"","title":"Parking Space for Unused or Removed Documentation"},{"location":"_scratch/#open-ended-text-questions","text":"Open-ended questions should allow students to research concepts themselves, as well as guide them through sample responses, and finally also automatically mark a quiz as completed when a student gave their answer to all quiz questions. To accomplish this in Moodle's question context, we use questions of the type Essay (auto-graded) . The current setup: marks a student correct once they enter at least one character provides a sample answer when pressing the check button includes a reminder to compare and ask further questions to mentors/on the forum marks the quiz as completed when all questions have been answered Set the stage: Use this information-question as the first question of each open-ended quiz you create. It will signify to students that they are entering exploration mode, as well as provide useful tips and a link to our forum.","title":"Open-Ended Text Questions"},{"location":"_scratch/#how-to-set-up-open-ended-text-questions","text":"In the Question Bank, create a new Category for the course section you are creating a quiz for. The suggested question type to use for questions that are designed to prompt students to think and formulate their own answers, is Essay (autograded) . In Combined Feedback / \"For any correct response\" enter: the disclaimer alert box the sample answer Code for Disclaimer Alert Box: <div class=\"alert alert-success\" role=\"alert\"> <strong>Thanks for submitting!</strong> You can compare your answer to our <strong>sample response</strong> below. Since these are open-ended questions, the answers might not match completely. Please discuss any further questions with your mentor and on <a href=\"https://forum.codingnomads.co/\" target=\"_blank\" class=\"alert-link\">our forum</a>. </div> In order to use the default auto-grading, specify a minimum number of characters to be used. This needs to be >0 (e.g. 1 ). If this setting is left at 0 , then students will receive an \"Incorrect\" mark when submitting any written content. In Auto-Grading change to \"Characters\" and \"1\" in the respective boxes: Finally, in the Multiple tries section, set the \"Penalty for each incorrect try\" to 0% :","title":"How To Set Up Open-Ended Text Questions"},{"location":"_scratch/#optional-settings","text":"You can also change the input size of the answer text field: You can also add tags to each question:","title":"Optional Settings"},{"location":"_scratch/#regex-short-answer-questions","text":"These work great for giving some more flexibility to students' answers. https://docs.moodle.org/37/en/Regular_Expression_Short-Answer_question_type You can: write Regex to specify a limited set of answers : Q: Write one keyword that is part of a Python conditional A: (if|elif|else) write Regex to exclude a wide set of wrong answers Q: Note: The plugin is designed to prevent using correct answers that have endless possibilities--therefore the use of Regex for correct answers is limited. This is purposefully designed like that. However, whole power of regex is available to you to identify incorrect answers, while needing to be specific with correct answers.","title":"Regex Short-Answer Questions"},{"location":"contributing/","text":"Contributing Workflow \u00b6 Do not edit/update/commit directly to the main branch The content repositories reflects what's on the platform as of the last commit to main or master . Making Contributions \u00b6 If you have any contributions you'd like to make, please create a branch, make your changes, and submit a pull request. We'll review it and merge it if it looks good. If you have small typos or errors that would be quick to fix, you can create a pull request, but you also let us know directly by reaching out via Discord or creating an issue in the repository. If you have any other questions, or proposals for larger changes, feel free to create an issue in the repository to kick off a discussion. Project Structure \u00b6 We use an exporting tool to create a directory structure with markdown files which is what you see here. The way the course is structured is as follows: Course_Name \u2502 index.md \u2502 001_1_section_1 \u2502 \u2502 index.md \u2502 \u2502 001_lesson.md \u2502 \u2502 002_lesson.md \u2502 \u2502 ... \u2502 002_2_section_2 \u2502 \u2502 index.md \u2502 \u2502 001_lesson.md \u2502 \u2502 002_lesson.md \u2502 \u2502 ... \u2502 ... ... Everything outside the Course_Name folder doesn't get included on the platform. I.e. this document, the README.md , doesn't get included. Feel free to add any other files or folders you need to help manage the course content or provide additional resources for instructors. The first three numbers and underscore ( 001_ ) on the sections and lessons are there to keep them in order in the file system. They are added by the exporting tool and aren't included in the course content on the platform. That's why it may seem redundant to have 001_1... and 002_2... in the folder names, but it's the way that the export tool ensures that the files are in the same order as what appears in the platform. YAML Front Matter Metadata \u00b6 All markdown files have metadata at the top of the file in the form of a YAML front matter block. YAML front matter is a convention to add metadata to markdown files in YAML format between two sets of three dashes --- at the top of the file. Here's an example of what it looks like: --- title: \"Lesson Title\" description: \"A description of the lesson\" ... --- Lesson content goes here... In general you don't need to touch the metadata, but you may want to adjust a title or description to better fit the content of the lesson, in which case you can do so in the front matter. Don't touch other parts of the front matter unless you know what you're doing. Since the title is declared in the front matter, don't add an h1 ( # ) at the top of the markdown file. The title will be automatically added to the page by the platform. Start the content with a brief introduction and then start the headings with h2 tags ( ## ). Index Files \u00b6 The course folder has an index.md file which only has front matter and has the course metadata. This metadata has information like the course title, the description, the course image, the course duration, and more. Each section also has a similar index.md file. Adding a New Lesson \u00b6 If you want to add a new lesson, you can do so by creating a new markdown file in the appropriate section folder. All you need to add in terms of front matter is slug , title , metaTitle , description , metaDescription , and keywords and type . Since the lessons are numbered, to get your lesson to show up in the right order, you can add another number to the numbering system. Since this is a file system, assume alphabetical order. 001 002 003 0033 004 005 ... For example, if you're adding a lesson between 005_ and 006_ , you could name your file 0055_New Lesson Title.md . Historical Releases \u00b6 For historical purposes, the content repos also contains three releases (so far): Legacy Platform Content : The content as it was last published on the legacy platform (Moodle). SEO Migration Content : The content as it was updated in preparation for publish on the new platform. Initial Course Export Content : The content exported from the new platform as it existed post-initial-publish.","title":"Contributing Workflow"},{"location":"contributing/#contributing-workflow","text":"Do not edit/update/commit directly to the main branch The content repositories reflects what's on the platform as of the last commit to main or master .","title":"Contributing Workflow"},{"location":"contributing/#making-contributions","text":"If you have any contributions you'd like to make, please create a branch, make your changes, and submit a pull request. We'll review it and merge it if it looks good. If you have small typos or errors that would be quick to fix, you can create a pull request, but you also let us know directly by reaching out via Discord or creating an issue in the repository. If you have any other questions, or proposals for larger changes, feel free to create an issue in the repository to kick off a discussion.","title":"Making Contributions"},{"location":"contributing/#project-structure","text":"We use an exporting tool to create a directory structure with markdown files which is what you see here. The way the course is structured is as follows: Course_Name \u2502 index.md \u2502 001_1_section_1 \u2502 \u2502 index.md \u2502 \u2502 001_lesson.md \u2502 \u2502 002_lesson.md \u2502 \u2502 ... \u2502 002_2_section_2 \u2502 \u2502 index.md \u2502 \u2502 001_lesson.md \u2502 \u2502 002_lesson.md \u2502 \u2502 ... \u2502 ... ... Everything outside the Course_Name folder doesn't get included on the platform. I.e. this document, the README.md , doesn't get included. Feel free to add any other files or folders you need to help manage the course content or provide additional resources for instructors. The first three numbers and underscore ( 001_ ) on the sections and lessons are there to keep them in order in the file system. They are added by the exporting tool and aren't included in the course content on the platform. That's why it may seem redundant to have 001_1... and 002_2... in the folder names, but it's the way that the export tool ensures that the files are in the same order as what appears in the platform.","title":"Project Structure"},{"location":"contributing/#yaml-front-matter-metadata","text":"All markdown files have metadata at the top of the file in the form of a YAML front matter block. YAML front matter is a convention to add metadata to markdown files in YAML format between two sets of three dashes --- at the top of the file. Here's an example of what it looks like: --- title: \"Lesson Title\" description: \"A description of the lesson\" ... --- Lesson content goes here... In general you don't need to touch the metadata, but you may want to adjust a title or description to better fit the content of the lesson, in which case you can do so in the front matter. Don't touch other parts of the front matter unless you know what you're doing. Since the title is declared in the front matter, don't add an h1 ( # ) at the top of the markdown file. The title will be automatically added to the page by the platform. Start the content with a brief introduction and then start the headings with h2 tags ( ## ).","title":"YAML Front Matter Metadata"},{"location":"contributing/#index-files","text":"The course folder has an index.md file which only has front matter and has the course metadata. This metadata has information like the course title, the description, the course image, the course duration, and more. Each section also has a similar index.md file.","title":"Index Files"},{"location":"contributing/#adding-a-new-lesson","text":"If you want to add a new lesson, you can do so by creating a new markdown file in the appropriate section folder. All you need to add in terms of front matter is slug , title , metaTitle , description , metaDescription , and keywords and type . Since the lessons are numbered, to get your lesson to show up in the right order, you can add another number to the numbering system. Since this is a file system, assume alphabetical order. 001 002 003 0033 004 005 ... For example, if you're adding a lesson between 005_ and 006_ , you could name your file 0055_New Lesson Title.md .","title":"Adding a New Lesson"},{"location":"contributing/#historical-releases","text":"For historical purposes, the content repos also contains three releases (so far): Legacy Platform Content : The content as it was last published on the legacy platform (Moodle). SEO Migration Content : The content as it was updated in preparation for publish on the new platform. Initial Course Export Content : The content exported from the new platform as it existed post-initial-publish.","title":"Historical Releases"},{"location":"temp/","text":"Until these creator docs recieve a complete overhaul, here is a quick guide to formatting content for the new platform https://codingnomads.com Links \u00b6 Links use standard markdown syntax and will open in new tab by default: [Google](https://google.com) Links can add an optional title that is displayed as a tool-tip: [Google](https://google.com \"The best search engine for privacy\") Images \u00b6 Images can be single-tag and require a src attribute: [[img src=\"http://www.image.com/location\"]] Images support alt and title attributes (and should include them), values must be wrapped in double quotes: [[img src=\"http://www.image.com/location\" alt=\"image alt text\" title=\"The Title of This Image\"]] Image tags can be written in a multi-line format, and also support a link attribute which opens in a new tab by default: [[img src=\"http://www.image.com/location\" alt=\"image alt text\" title=\"The Title of This Image\" link=\"https://example.com\" ]] Videos \u00b6 Videos are single-tag (no closing tag) and require an id attribute: [[video id=\"77834767\"]] For Video lessons, please include the lesson description in the body above the embedded video: In this video you'll explore a Spring Batch demo project with practical batch processing techniques, taking raw CSV data and processing it for storage in a MySQL database. [[video id=\"764391747\"]] Notes \u00b6 Notes require an opening and closing tag, and can contain markdown inside. [[note]] This is a note. [This is a link](http://example.com). This is still the same paragraph. [[/note]] Blank lines = a new paragraph in the rendered html: [[note]] This is a note [This is a link](http://example.com). Hello, _this is Markdown_ and a second paragraph! This is the third paragraph of a note with **bold**. [[/note]] Alerts \u00b6 Alerts work the same way: [[alert]] This is an _alert_! [[/alert]] Learn by Doing \u00b6 Require an opening and closing tags: [[learn-by-doing]] **Package:** `com.codingnomads.example` This is a Learn by Doing! [[/learn-by-doing]] External Resources \u00b6 For link blocks to additional resources: [[external-resource src=\"https://example.com\" link-text=\"Example Resource\"]] Checkout this _incredible_ resource! [[/external-resource]]","title":"Custom Markdown Syntax"},{"location":"temp/#links","text":"Links use standard markdown syntax and will open in new tab by default: [Google](https://google.com) Links can add an optional title that is displayed as a tool-tip: [Google](https://google.com \"The best search engine for privacy\")","title":"Links"},{"location":"temp/#images","text":"Images can be single-tag and require a src attribute: [[img src=\"http://www.image.com/location\"]] Images support alt and title attributes (and should include them), values must be wrapped in double quotes: [[img src=\"http://www.image.com/location\" alt=\"image alt text\" title=\"The Title of This Image\"]] Image tags can be written in a multi-line format, and also support a link attribute which opens in a new tab by default: [[img src=\"http://www.image.com/location\" alt=\"image alt text\" title=\"The Title of This Image\" link=\"https://example.com\" ]]","title":"Images"},{"location":"temp/#videos","text":"Videos are single-tag (no closing tag) and require an id attribute: [[video id=\"77834767\"]] For Video lessons, please include the lesson description in the body above the embedded video: In this video you'll explore a Spring Batch demo project with practical batch processing techniques, taking raw CSV data and processing it for storage in a MySQL database. [[video id=\"764391747\"]]","title":"Videos"},{"location":"temp/#notes","text":"Notes require an opening and closing tag, and can contain markdown inside. [[note]] This is a note. [This is a link](http://example.com). This is still the same paragraph. [[/note]] Blank lines = a new paragraph in the rendered html: [[note]] This is a note [This is a link](http://example.com). Hello, _this is Markdown_ and a second paragraph! This is the third paragraph of a note with **bold**. [[/note]]","title":"Notes"},{"location":"temp/#alerts","text":"Alerts work the same way: [[alert]] This is an _alert_! [[/alert]]","title":"Alerts"},{"location":"temp/#learn-by-doing","text":"Require an opening and closing tags: [[learn-by-doing]] **Package:** `com.codingnomads.example` This is a Learn by Doing! [[/learn-by-doing]]","title":"Learn by Doing"},{"location":"temp/#external-resources","text":"For link blocks to additional resources: [[external-resource src=\"https://example.com\" link-text=\"Example Resource\"]] Checkout this _incredible_ resource! [[/external-resource]]","title":"External Resources"}]}